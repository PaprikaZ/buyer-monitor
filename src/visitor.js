// Generated by CoffeeScript 1.8.0
var AmazonCNVisitor, AmazonJPVisitor, AmazonUSVisitor, JingDongVisitor, Visitor, cheerio, config, pushMsgClient, recordClient, redis, redisHost, redisPort, redisPushMsgQueueDBIndex, redisRecordDBIndex, request,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require("request");

cheerio = require("cheerio");

config = rootRequire("src/config.js");

redisPort = config.redisPort;

redisHost = config.redisHost;

redisRecordDBIndex = config.redisRecordDBIndex;

redisPushMsgQueueDBIndex = config.redisPushMsgQueueDBIndex;

redis = require("redis");

recordClient = redis.createClient(redisPort, redisHost);

recordClient.select(redisRecordDBIndex, function(err, res) {
  if (!err) {
    logger.info("redis select %s %s", redisRecordDBIndex, res);
  } else {
    logger.error("redis select %s failed, %s", redisRecordDBIndex, err);
  }
});

recordClient.on("error", function(err) {
  logger.error("visitor record client caught error, %s", err);
});

logger.info("redis record client connect success");

pushMsgClient = redis.createClient(redisPort, redisHost);

pushMsgClient.select(redisPushMsgQueueDBIndex, function(err, res) {
  if (!err) {
    logger.info("redis select %s %s", redisPushMsgQueueDBIndex, res);
  } else {
    logger.error("redis select %s failed, %s", redisPushMsgQueueDBIndex, err);
  }
});

pushMsgClient.on("error", function(err) {
  logger.error("visitor push msg client caught error, %s", err);
});

logger.info("redis push msg client connect success");

Visitor = (function() {
  function Visitor(siteUrl) {
    this.siteUrl = siteUrl;
  }

  Visitor.prototype.visit = function(pageUrl) {};

  Visitor.prototype.failRequestHandler = function() {};

  Visitor.prototype.errorResponseHandler = function() {};

  Visitor.prototype.parseProductPage = function() {};

  return Visitor;

})();

AmazonCNVisitor = (function(_super) {
  __extends(AmazonCNVisitor, _super);

  function AmazonCNVisitor() {
    return AmazonCNVisitor.__super__.constructor.apply(this, arguments);
  }

  AmazonCNVisitor.prototype.visit = function(pageUrl) {
    var self;
    self = this;
    request(pageUrl, function(err, res, body) {
      if (err) {
        self.failRequestHandler(err, res);
      } else if (res.statusCode !== 200) {
        self.errorResponseHandler(err, res);
      } else {
        self.parseProductPage(body);
      }
    });
  };

  AmazonCNVisitor.prototype.failRequestHandler = function(err, res) {};

  AmazonCNVisitor.prototype.errorResponseHandler = function(err, res) {};

  AmazonCNVisitor.prototype.parseProductPage = function(body) {
    var $;
    $ = cheerio.load(body);
    $('#priceblock_ourprice').each(function() {
      console.log('parse product price %s', $(this).text());
    });
  };

  return AmazonCNVisitor;

})(Visitor);

AmazonUSVisitor = (function(_super) {
  __extends(AmazonUSVisitor, _super);

  function AmazonUSVisitor() {
    return AmazonUSVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonUSVisitor;

})(Visitor);

AmazonJPVisitor = (function(_super) {
  __extends(AmazonJPVisitor, _super);

  function AmazonJPVisitor() {
    return AmazonJPVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonJPVisitor;

})(Visitor);

JingDongVisitor = (function(_super) {
  __extends(JingDongVisitor, _super);

  function JingDongVisitor() {
    return JingDongVisitor.__super__.constructor.apply(this, arguments);
  }

  return JingDongVisitor;

})(Visitor);

module.exports.select = function(siteUrl) {
  var newVisitor;
  newVisitor = (function() {
    switch (siteUrl) {
      case "www.amazon.com":
        return new AmazonUSVisitor(siteUrl);
      case "www.amazon.cn":
        return new AmazonCNVisitor(siteUrl);
      case "www.amazon.co.jp":
        return new AmazonJPVisitor(siteUrl);
      case "www.jd.com":
        return new JingDongVisitor(siteUrl);
      default:
        return logger.warn("there is no available visitor for site %s", siteUrl);
    }
  })();
  return newVisitor;
};
