// Generated by CoffeeScript 1.8.0
var AmazonCNVisitor, AmazonJPVisitor, AmazonUSVisitor, JingDongVisitor, Visitor, client, config, historyKey, pushQueueKey, redis, redisHost, redisPort, redisRecordDBIndex, request, selectParser,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require("request");

config = rootRequire("src/config.js");

selectParser = rootRequire("src/parser.js").select;

redisPort = config.redisPort;

redisHost = config.redisHost;

redisRecordDBIndex = config.redisRecordDBIndex;

historyKey = config.redisHistoryKey;

pushQueueKey = config.redisPushQueueKey;

redis = require("redis");

client = redis.createClient(redisPort, redisHost);

client.select(redisRecordDBIndex, function(err, res) {
  if (!err) {
    logger.info("redis select %s %s", redisRecordDBIndex, res);
  } else {
    logger.error("redis select %s failed, %s", redisRecordDBIndex, err);
  }
});

client.on("error", function(err) {
  logger.error("visitor record client caught error, %s", err);
});

logger.info("redis record client connect success");

Visitor = (function() {
  function Visitor(seed) {
    this.seed = seed;
  }

  Visitor.prototype.visit = function() {};

  Visitor.prototype.failRequestHandler = function() {};

  Visitor.prototype.errorResponseHandler = function() {};

  Visitor.prototype.processPage = function(html) {
    var date, result;
    date = new Date();
    result = this.parsePage(html);
    this.pushQueue(result);
    result.date = date.toUTCString();
    this.pushRecord(result);
  };

  Visitor.prototype.parsePage = function(html) {};

  Visitor.prototype.pushQueue = function(result) {
    if (this.seed.verdict(result)) {
      client.lpush(pushQueueKey, JSON.stringify(result));
    }
  };

  Visitor.prototype.pushRecord = function(record) {
    client.lpush(historyKey, JSON.stringify(record));
  };

  return Visitor;

})();

AmazonCNVisitor = (function(_super) {
  __extends(AmazonCNVisitor, _super);

  function AmazonCNVisitor() {
    return AmazonCNVisitor.__super__.constructor.apply(this, arguments);
  }

  AmazonCNVisitor.prototype.visit = function() {
    var self;
    self = this;
    request(self.seed.url, function(err, res, body) {
      if (err) {
        self.failRequestHandler(err, res);
      } else if (res.statusCode !== 200) {
        self.errorResponseHandler(err, res);
      } else {
        self.parsePage(body);
      }
    });
  };

  AmazonCNVisitor.prototype.failRequestHandler = function(err, res) {};

  AmazonCNVisitor.prototype.errorResponseHandler = function(err, res) {};

  AmazonCNVisitor.prototype.parsePage = function(html) {
    var attr, parser, result, val, _ref;
    parser = selectParser(this.seed.site);
    result = {
      id: this.seed.id,
      site: this.seed.site,
      url: this.seed.url
    };
    _ref = parser.parse(html);
    for (attr in _ref) {
      val = _ref[attr];
      result[attr] = val;
    }
    console.log(result);
    return result;
  };

  return AmazonCNVisitor;

})(Visitor);

AmazonUSVisitor = (function(_super) {
  __extends(AmazonUSVisitor, _super);

  function AmazonUSVisitor() {
    return AmazonUSVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonUSVisitor;

})(Visitor);

AmazonJPVisitor = (function(_super) {
  __extends(AmazonJPVisitor, _super);

  function AmazonJPVisitor() {
    return AmazonJPVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonJPVisitor;

})(Visitor);

JingDongVisitor = (function(_super) {
  __extends(JingDongVisitor, _super);

  function JingDongVisitor() {
    return JingDongVisitor.__super__.constructor.apply(this, arguments);
  }

  return JingDongVisitor;

})(Visitor);

module.exports.select = function(seed) {
  var newVisitor;
  newVisitor = (function() {
    switch (seed.site) {
      case "www.amazon.com":
        return new AmazonUSVisitor(seed);
      case "www.amazon.cn":
        return new AmazonCNVisitor(seed);
      case "www.amazon.co.jp":
        return new AmazonJPVisitor(seed);
      case "www.jd.com":
        return new JingDongVisitor(seed);
      default:
        return logger.warn("there is no available visitor for site %s", seed.site);
    }
  })();
  return newVisitor;
};
