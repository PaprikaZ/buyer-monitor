// Generated by CoffeeScript 1.8.0
var AmazonCNVisitor, AmazonJPVisitor, AmazonUSVisitor, JingDongVisitor, MANDATORY_BASE_FIELDS, MANDATORY_EXPAND_FIELDS, Messenger, Visitor, config, createParser, db, request, s, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require('request');

util = require('util');

config = require('./config.js');

s = require('./seed.js');

MANDATORY_EXPAND_FIELDS = s.MANDATORY_EXPAND_FIEL;

MANDATORY_BASE_FIELDS = s.MANDATORY_BASE_FIELDS;

createParser = require('./page_parser.js').createParser;

Messenger = require('./messenger.js');

db = require('./db_client.js');

Visitor = (function() {
  function Visitor(seed) {
    this.seed = seed;
    this.client = db.getClient();
  }

  Visitor.prototype.visit = function() {
    var self;
    self = this;
    request.get(self.seed.url, function(err, res, body) {
      if (!err) {
        if (res.statusCode === 200) {
          self.processPage(body);
        } else {
          self.errorResponseHandler(res, body);
        }
      } else {
        self.failedRequestHandler(err);
      }
    });
  };

  Visitor.prototype.failedRequestHandler = function(err) {
    logger.error('%s request failed.', this.constructor.name);
    logger.error('msg: %s', err.message);
    throw err;
  };

  Visitor.prototype.errorResponseHandler = function(res, body) {
    logger.error('%s response error.', this.constructor.name);
    logger.error('url: %s', res.url);
    logger.error('status code: %s', res.statusCode);
    logger.error('body: %s', body);
  };

  Visitor.prototype.processPage = function(html) {
    var date, delayDebugMsg, messenger, pushMsg, result;
    date = new Date();
    result = this.parsePage(html);
    if (this.seed.verdict(result)) {
      delayDebugMsg = 'push delay ';
      MANDATORY_BASE_FIELDS.map(function(field) {
        delayDebugMsg += util.format('%s %s', field, result[field]);
      });
      logger.debug(delayDebugMsg);
      messenger = new Messenger();
      messenger.push(result);
      pushMsg = {};
      MANDATORY_BASE_FIELDS.map(function(field) {
        pushMsg[field] = result[field];
      });
      this.client.lpush(config.pushQueueKey, JSON.stringify(pushMsg));
    }
    result.date = date.toUTCString();
    this.client.lpush(config.historyKey, JSON.stringify(result));
  };

  Visitor.prototype.parsePage = function(html) {
    var attr, result, self, val, _ref;
    self = this;
    result = {};
    MANDATORY_EXPAND_FIELDS.map(function(field) {
      result[field] = self.seed[field];
    });
    _ref = createParser(this.seed.site).parse(html);
    for (attr in _ref) {
      val = _ref[attr];
      result[attr] = val;
    }
    logger.info(result);
    return result;
  };

  return Visitor;

})();

AmazonCNVisitor = (function(_super) {
  __extends(AmazonCNVisitor, _super);

  function AmazonCNVisitor() {
    return AmazonCNVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonCNVisitor;

})(Visitor);

AmazonUSVisitor = (function(_super) {
  __extends(AmazonUSVisitor, _super);

  function AmazonUSVisitor() {
    return AmazonUSVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonUSVisitor;

})(Visitor);

AmazonJPVisitor = (function(_super) {
  __extends(AmazonJPVisitor, _super);

  function AmazonJPVisitor() {
    return AmazonJPVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonJPVisitor;

})(Visitor);

JingDongVisitor = (function(_super) {
  __extends(JingDongVisitor, _super);

  function JingDongVisitor() {
    return JingDongVisitor.__super__.constructor.apply(this, arguments);
  }

  return JingDongVisitor;

})(Visitor);

module.exports.createVisitor = function(seed) {
  var visitor;
  visitor = (function() {
    switch (seed.site) {
      case 'www.amazon.com':
        return new AmazonUSVisitor(seed);
      case 'www.amazon.cn':
        return new AmazonCNVisitor(seed);
      case 'www.amazon.co.jp':
        return new AmazonJPVisitor(seed);
      case 'www.jd.com':
        return new JingDongVisitor(seed);
      default:
        logger.error('there is no available visitor for site %s', seed.site);
        throw new Error('no available visitor');
    }
  })();
  return visitor;
};
