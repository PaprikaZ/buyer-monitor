// Generated by CoffeeScript 1.8.0
var AmazonCNVisitor, AmazonJPVisitor, AmazonUSVisitor, DBClient, JingDongVisitor, Messenger, Parser, Visitor, client, config, request,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require('request');

config = require('./config.js');

Parser = require('./page_parser.js');

Messenger = require('./messenger.js');

DBClient = require('./db_client.js');

client = DBClient();

Visitor = (function() {
  function Visitor(seed) {
    this.seed = seed;
  }

  Visitor.prototype.visit = function() {
    var self;
    self = this;
    request.get(self.seed.url, function(err, res, body) {
      if (!err && res.statusCode === 200) {
        self.processPage(body);
      } else if (!err && res.statusCode !== 200) {
        self.errorResponseHandler(err, res, body);
      } else {
        self.failedRequestHandler(err, res, body);
      }
    });
  };

  Visitor.prototype.failedRequestHandler = function(err, res, body) {
    logger.error("%s visitor request failed.", this.constructor.name);
    logger.error("err: %s", err);
  };

  Visitor.prototype.errorResponseHandler = function(err, res, body) {
    logger.error("%s visitor response error.", this.constructor.name);
    logger.error("url: %s", this.seed.url);
    logger.error("response status code: %s", res.statusCode);
    logger.error("response body: %s", body);
  };

  Visitor.prototype.processPage = function(html) {
    var date, result;
    date = new Date();
    result = this.parsePage(html);
    this.pushQueue(result);
    result.date = date.toUTCString();
    this.pushRecord(result);
  };

  Visitor.prototype.parsePage = function(html) {
    var attr, parser, result, val, _ref;
    parser = Parser(this.seed.site);
    result = {
      id: this.seed.id,
      site: this.seed.site,
      url: this.seed.url
    };
    _ref = parser.parse(html);
    for (attr in _ref) {
      val = _ref[attr];
      result[attr] = val;
    }
    logger.info(result);
    return result;
  };

  Visitor.prototype.pushQueue = function(result) {
    var messenger;
    if (this.seed.verdict(result)) {
      messenger = new Messenger();
      messenger.push(result);
      logger.debug("push delay id %s site %s", result.id, result.site);
      client.lpush(config.pushQueueKey, JSON.stringify({
        id: result.id,
        site: result.site
      }));
    }
  };

  Visitor.prototype.pushRecord = function(record) {
    client.lpush(config.historyKey, JSON.stringify(record));
  };

  return Visitor;

})();

AmazonCNVisitor = (function(_super) {
  __extends(AmazonCNVisitor, _super);

  function AmazonCNVisitor() {
    return AmazonCNVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonCNVisitor;

})(Visitor);

AmazonUSVisitor = (function(_super) {
  __extends(AmazonUSVisitor, _super);

  function AmazonUSVisitor() {
    return AmazonUSVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonUSVisitor;

})(Visitor);

AmazonJPVisitor = (function(_super) {
  __extends(AmazonJPVisitor, _super);

  function AmazonJPVisitor() {
    return AmazonJPVisitor.__super__.constructor.apply(this, arguments);
  }

  return AmazonJPVisitor;

})(Visitor);

JingDongVisitor = (function(_super) {
  __extends(JingDongVisitor, _super);

  function JingDongVisitor() {
    return JingDongVisitor.__super__.constructor.apply(this, arguments);
  }

  return JingDongVisitor;

})(Visitor);

module.exports = function(seed) {
  var newVisitor;
  newVisitor = (function() {
    switch (seed.site) {
      case 'www.amazon.com':
        return new AmazonUSVisitor(seed);
      case 'www.amazon.cn':
        return new AmazonCNVisitor(seed);
      case 'www.amazon.co.jp':
        return new AmazonJPVisitor(seed);
      case 'www.jd.com':
        return new JingDongVisitor(seed);
      default:
        return logger.warn("there is no available visitor for site %s", seed.site);
    }
  })();
  return newVisitor;
};
