// Generated by CoffeeScript 1.8.0
var AmazonCNParser, AmazonJPParser, AmazonUSParser, JingdongParser, MANDATORY_FIELDS, Parser, cheerio, config, review, _MANDATORY_PARSE_FIELDS,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

config = require('./config.js');

cheerio = require('cheerio');

_MANDATORY_PARSE_FIELDS = ['title', 'price', 'fullPrice', 'review', 'instore', 'benefits'];

MANDATORY_FIELDS = ['title', 'price', 'fullPrice', 'discount', 'review', 'instore', 'benefits'];

require('./seed.js').AVAILABLE_VERDICT_FIELDS.map(function(field) {
  if (MANDATORY_FIELDS.indexOf(field) === -1) {
    console.error('seed verdict field %s is missing in page parser result', field);
    throw new Error('missing seed verdict field');
  }
});

review = {
  fiveStar: 10,
  fourHalfStar: 9,
  fourStar: 8,
  threeHalfStar: 7,
  threeStar: 6,
  twoHalfStar: 5,
  twoStar: 4,
  oneHalfStar: 3,
  oneStar: 2,
  halfStar: 1,
  zeroStar: 0,
  unknownStar: -1
};

Parser = (function() {
  function Parser() {}

  Parser.prototype.load = cheerio.load;

  Parser.prototype.mandatoryParseFields = _MANDATORY_PARSE_FIELDS;

  Parser.prototype.mandatoryFields = MANDATORY_FIELDS;

  Parser.prototype.parse = function(html) {
    var $, allFieldOk, result, self;
    self = this;
    $ = this.load(html);
    result = {};
    this.mandatoryParseFields.map(function(field) {
      result[field] = self[field]($);
    });
    result.discount = (1 - result.price / result.fullPrice) * 100;
    allFieldOk = this.mandatoryParseFields.every(function(field) {
      return field !== null;
    });
    if (allFieldOk) {
      return result;
    } else {
      return logger.error('%s parse page failed', this.constructor.name);
    }
  };

  Parser.prototype.title = function(selector) {
    return 'unknown';
  };

  Parser.prototype.price = function(selector) {
    return -1;
  };

  Parser.prototype.fullPrice = function(selector) {
    return -1;
  };

  Parser.prototype.review = function(selector) {
    return review.unknownStar;
  };

  Parser.prototype.instore = function(selector) {
    return false;
  };

  Parser.prototype.benefits = function(selector) {
    return [];
  };

  return Parser;

})();

AmazonCNParser = (function(_super) {
  __extends(AmazonCNParser, _super);

  function AmazonCNParser() {
    return AmazonCNParser.__super__.constructor.apply(this, arguments);
  }

  AmazonCNParser.prototype.title = function(selector) {
    return selector('#productTitle').text();
  };

  AmazonCNParser.prototype.priceToInt = function(text) {
    return parseInt(text.slice(1).replace(',', ''));
  };

  AmazonCNParser.prototype.price = function(selector) {
    return this.priceToInt(selector('#priceblock_ourprice').text());
  };

  AmazonCNParser.prototype.fullPrice = function(selector) {
    return this.priceToInt(selector('#priceblock_ourprice').parent().parent().parent().children().first().children().last().text());
  };

  AmazonCNParser.prototype.review = function(selector) {
    var classes;
    classes = selector('#acrPopover').children().children().children('.a-icon-star').attr('class');
    if (/a-star-5/.test(classes)) {
      return review.fiveStar;
    } else if (/a-star-4-5/.test(classes)) {
      return review.fourHalfStar;
    } else if (/a-star-4/.test(classes)) {
      return review.fourStar;
    } else if (/a-star-3-5/.test(classes)) {
      return review.threeStar;
    } else if (/a-star-3/.test(classes)) {
      return review.threeStar;
    } else if (/a-star-2-5/.test(classes)) {
      return review.twoHalfStar;
    } else if (/a-star-2/.test(classes)) {
      return review.twoStar;
    } else if (/a-star-1-5/.test(classes)) {
      return review.oneHalfStar;
    } else if (/a-star-1/.test(classes)) {
      return review.oneStar;
    } else if (/a-star-0-5/.test(classes)) {
      return review.halfStar;
    } else if (/a-star-0/.test(classes)) {
      return review.zeroStar;
    } else {
      return review.unknownStar;
    }
  };

  AmazonCNParser.prototype.instore = function(selector) {
    var classes;
    classes = selector('#ddmAvailabilityMessage').children().attr('class');
    if (/a-color-success/.test(classes)) {
      return true;
    } else {
      return false;
    }
  };

  return AmazonCNParser;

})(Parser);

AmazonUSParser = (function(_super) {
  __extends(AmazonUSParser, _super);

  function AmazonUSParser() {
    return AmazonUSParser.__super__.constructor.apply(this, arguments);
  }

  return AmazonUSParser;

})(Parser);

AmazonJPParser = (function(_super) {
  __extends(AmazonJPParser, _super);

  function AmazonJPParser() {
    return AmazonJPParser.__super__.constructor.apply(this, arguments);
  }

  return AmazonJPParser;

})(Parser);

JingdongParser = (function(_super) {
  __extends(JingdongParser, _super);

  function JingdongParser() {
    return JingdongParser.__super__.constructor.apply(this, arguments);
  }

  return JingdongParser;

})(Parser);

module.exports.MANDATORY_FIELDS = MANDATORY_FIELDS;

module.exports.createParser = function(site) {
  var parser;
  parser = (function() {
    switch (site) {
      case 'www.amazon.cn':
        return new AmazonCNParser();
      case 'www.amazon.com':
        return new AmazonUSParser();
      case 'www.amazon.co.jp':
        return new AmazonJPParser();
      case 'www.jd.com':
        return new JingdongParser();
      default:
        logger.error('no available page parser for site %s', site);
        throw new Error('no available parser');
    }
  })();
  return parser;
};
