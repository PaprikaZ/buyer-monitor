// Generated by CoffeeScript 1.8.0
var config, generateProductUrl, getSiteCurrency, getSiteEncoding, htmlSuffix, httpPrefix, httpsPrefix, multiMatchHandler, siteNotSupportHandler, sites, urlNotSupportHandler, urlToSite;

config = require('./config.js');

httpPrefix = 'http://';

httpsPrefix = 'https://';

htmlSuffix = '.html';

sites = [
  {
    site: 'www.amazon.cn',
    currency: 'CNY',
    encoding: 'utf8',
    regexp: /amazon\.cn/,
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  }, {
    site: 'www.amazon.com',
    currency: 'USD',
    encoding: 'utf8',
    regexp: /amazon\.com/,
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  }, {
    site: 'www.amazon.co.jp',
    currency: 'JPY',
    encoding: 'utf8',
    regexp: /amazon\.co\.jp/,
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  }, {
    site: 'www.jd.com',
    currency: 'CNY',
    encoding: 'utf8',
    regexp: /jd\.com/,
    generateProductUrl: function(productId) {
      return httpPrefix + this.site.replace('www', 'wap') + '/product/' + productId + htmlSuffix;
    }
  }
];

generateProductUrl = function(id, site) {
  var matched;
  matched = sites.filter(function(s) {
    return s.site === site;
  });
  switch (matched.length) {
    case 0:
      return siteNotSupportHandler(site);
    case 1:
      return matched.pop().generateProductUrl(id);
    default:
      return multiMatchHandler('site');
  }
};

getSiteCurrency = function(site) {
  var matched;
  matched = sites.filter(function(s) {
    return s.site === site;
  });
  switch (matched.length) {
    case 0:
      return siteNotSupportHandler(site);
    case 1:
      return matched.pop().currency;
    default:
      return multiMatchHandler('site');
  }
};

getSiteEncoding = function(site) {
  var matched;
  matched = sites.filter(function(s) {
    return s.site === site;
  });
  switch (matched.length) {
    case 0:
      return siteNotSupportHandler(site);
    case 1:
      return matched.pop().encoding;
    default:
      return multiMatchHandler('site');
  }
};

urlToSite = function(url) {
  var matched;
  matched = sites.filter(function(s) {
    return s.regexp.test(url);
  });
  switch (matched.length) {
    case 0:
      return urlNotSupportHandler(url);
    case 1:
      return matched.pop().site;
    default:
      return multiMatchHandler('regexp');
  }
};

multiMatchHandler = function(field) {
  logger.error('there is multi matched sites on field %s', field);
  throw new Error('programming error, multi sites matched');
};

siteNotSupportHandler = function(site) {
  logger.error('site %s not support yet', site);
  throw new Error('value not support error, site');
};

urlNotSupportHandler = function(url) {
  logger.error('url %s not support', url);
  throw new Error('value not support error, url');
};

exports.generateProductUrl = generateProductUrl;

exports.getSiteEncoding = getSiteEncoding;

exports.getSiteCurrency = getSiteCurrency;

exports.urlToSite = urlToSite;

module.exports = exports;
