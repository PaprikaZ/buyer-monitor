// Generated by CoffeeScript 1.8.0
var DBClient, Monitor, Seed, async, config, createVisitor, fs, launch, path, productFile, request;

fs = require('fs');

path = require('path');

async = require('async');

request = require('request');

config = require('./config.js');

createVisitor = require('./visitor.js').createVisitor;

Seed = require('./seed.js').Seed;

DBClient = require('./db_client.js');

productFile = '../product.json';

Monitor = (function() {
  function Monitor() {
    var self;
    self = this;
    this.accessTokens = config.accounts.map(function(account) {
      return account.accessToken;
    });
    this.seeds = JSON.parse(fs.readFileSync(path.join(__dirname, productFile))).map(function(item) {
      return new Seed(item);
    });
    logger.info("load seeds ok.");
    this.client = DBClient();
    this.client.del(config.pushQueueKey, function(err, res) {
      if (err) {
        logger.error("Clear push queue %s failed.", config.pushQueueKey);
        logger.error("%s", err);
        process.exit();
      }
    });
    logger.info("Launcher clear push queue ok.");
  }

  Monitor.prototype.verifyUserTokens = function() {
    var self;
    self = this;
    logger.info("user access tokens verifying ...");
    this.accessTokens.map(function(token) {
      var makeVerifyOK, options, printSuccess, shortToken;
      shortToken = token.slice(0, 7);
      options = {
        url: config.userServiceUrl,
        auth: {
          user: token
        }
      };
      makeVerifyOK = function() {
        var counter;
        counter = self.accessTokens.length;
        return function() {
          counter -= 1;
          if (counter === 0) {
            logger.info("all access tokens verify done.");
            self.startMonitorInterval();
          }
        };
      };
      printSuccess = makeVerifyOK();
      request.get(options, function(err, res, body) {
        var accessTokens;
        if (!err && res.statusCode === 200) {
          return printSuccess();
        } else if (err) {
          logger.error("token %s verify caught request error.", shortToken);
          logger.error("%s", err);
          logger.error("account access token verify caught failed, exit.");
          process.exit();
        } else if (res.statusCode === 401) {
          accessTokens = accessTokens.filter(function(elt) {
            return elt !== token;
          });
          logger.warn("token %s is invalid, removed.", shortToken);
          logger.warn("status code: %s", res.statusCode);
          logger.warn("error message: %s", body);
        } else {
          logger.warn("token %s verify response error", shortToken);
          logger.warn("status code: %s", res.statusCode);
          logger.warn("error message: %s", body);
        }
      });
    });
  };

  Monitor.prototype.delaySeed = function(id, site) {
    var previousSeeds, self;
    self = this;
    previousSeeds = self.seed;
    self.seeds = previousSeeds.filter(function(elt) {
      return elt.id !== id || elt.site !== site;
    });
    previousSeeds.filter(function(elt) {
      return elt.id === id && elt.site === site;
    }).forEach(function(elt) {
      var pushSeedBack;
      pushSeedBack = function() {
        self.seeds.push(elt);
      };
      logger.info("product id %s site %s delayed.", elt.id, elt.site);
      setTimeout(pushSeedBack, config.resendDelay);
    });
  };

  Monitor.prototype.sendRequests = function() {
    var visit;
    visit = function(seed) {
      var v;
      v = createVisitor(seed);
      v.visit();
    };
    if (this.seeds.length !== 0) {
      async.map(this.seeds, visit, function(err, results) {
        logger.error(err);
      });
    }
  };

  Monitor.prototype.startMonitorInterval = function() {
    var iterate, self;
    self = this;
    iterate = function() {
      var iter;
      iter = function() {
        return this.client.rpop(config.pushQueueKey, function(err, res) {
          var item;
          item = JSON.parse(res);
          logger.debug("pop delay id %s site %s", item.id, item.site);
          if (item) {
            self.delaySeed(item.id, item.site);
            iter();
          } else {
            logger.debug("iteration done.");
            self.sendRequests();
          }
        });
      };
      iter();
    };
    this.sendRequests();
    setInterval(iterate, config.monitorInterval);
  };

  Monitor.prototype.start = function() {
    this.verifyUserTokens();
  };

  return Monitor;

})();

launch = function() {
  var monitor;
  monitor = new Monitor();
  monitor.start();
};

module.exports.launch = function() {
  require('./argv_parser.js').parse(process.argv.slice(2), launch);
};

module.exports.config = require('./config.js');

module.exports.argvParser = require('./argv_parser.js');

module.exports.DBClient = require('./db_client.js');

module.exports.Messenger = require('./messenger.js');

module.exports.PageParser = require('./page_parser.js');

module.exports.Seed = require('./seed.js');

module.exports.Visitor = require('./visitor.js');
