// Generated by CoffeeScript 1.8.0
var MANDATORY_BASE_FIELDS, Monitor, Seed, config, createVisitor, db, fs, messenger, path, s, token, util, verdictsFileName;

util = require('util');

fs = require('fs');

path = require('path');

config = require('./config.js');

messenger = require('./messenger.js');

db = require('./db.js');

token = require('./token.js');

createVisitor = require('./visitor.js').createVisitor;

s = require('./seed.js');

Seed = s.Seed;

MANDATORY_BASE_FIELDS = s.MANDATORY_BASE_FIELDS;

verdictsFileName = path.join(__dirname, '../', config.verdictsFileName);

Monitor = (function() {
  function Monitor() {
    var verdicts;
    this.client = db.getRedisClient();
    if (0 < config.accounts.length) {
      this.accessTokens = config.accounts.map(function(account) {
        return account.accessToken;
      });
    } else {
      throw new Error('config error, access tokens empty');
    }
    verdicts = JSON.parse(fs.readFileSync(verdictsFileName));
    if (0 < verdicts.length) {
      this.seeds = verdicts.map(function(item) {
        return new Seed(item);
      });
    } else {
      throw new Error('config error, verdicts empty');
    }
    logger.debug('load seeds ok.');
  }

  Monitor.prototype.visitSites = function() {
    0 < this.seeds.length && this.seeds.map(function(seed) {
      return createVisitor(seed).visit();
    });
  };

  Monitor.prototype.delaySeed = function(id, site) {
    var previousSeeds, self;
    self = this;
    previousSeeds = this.seeds;
    this.seeds = previousSeeds.filter(function(s) {
      return s.id !== id || s.site !== site;
    });
    previousSeeds.filter(function(s) {
      return s.id === id && s.site === site;
    }).forEach(function(s) {
      var debugMsg;
      debugMsg = 'product ';
      MANDATORY_BASE_FIELDS.map(function(field) {
        debugMsg += util.format('%s %s', field, s[field]);
      });
      debugMsg += ' delayed';
      logger.debug(debugMsg);
      setTimeout((function() {
        return self.seeds.push(s);
      }), config.resendDelay);
    });
  };

  Monitor.prototype.processDelayQueue = function() {
    var iter, self;
    self = this;
    iter = function() {
      self.client.rpop(config.redisDelayQueueKey, function(err, res) {
        var item;
        if (!err) {
          if (res) {
            item = JSON.parse(res);
            self.delaySeed(item.id, item.site);
            iter();
          } else {
            logger.debug('processing delay queue done');
          }
        } else {
          db.redisErrorRethrow(err);
        }
      });
    };
    iter();
  };

  Monitor.prototype.pushMessages = function(results) {
    var self;
    self = this;
    results.map(function(result) {
      return self.accessTokens.map(function(token) {
        return messenger.push(result, token);
      });
    });
  };

  Monitor.prototype.processPushQueue = function() {
    var iter, results, self;
    self = this;
    results = [];
    iter = function() {
      self.client.rpop(config.redisPushQueueKey, function(err, res) {
        if (!err) {
          if (res) {
            results.push(JSON.parse(res));
            iter();
          } else {
            logger.debug('fetch push queue done');
            self.pushMessages(results);
          }
        } else {
          db.redisErrorRethrow(err);
        }
      });
    };
    iter();
  };

  Monitor.prototype.startMonitoring = function() {
    var self;
    self = this;
    self.visitSites();
    setInterval((function() {
      return self.processDelayQueue();
    }), config.pollInterval);
    setInterval((function() {
      return self.visitSites();
    }), config.monitorInterval);
    setInterval((function() {
      return self.processPushQueue();
    }), config.pushInterval);
  };

  Monitor.prototype.start = function() {
    var poll, self;
    self = this;
    token.verify(this.accessTokens);
    poll = setInterval((function() {
      if (token.isVerificationDone()) {
        clearInterval(poll);
        self.accessTokens = token.getValidTokens();
        self.startMonitoring();
      }
    }), config.pollInterval);
  };

  return Monitor;

})();

exports.createMonitor = function() {
  return new Monitor();
};

module.exports = exports;
