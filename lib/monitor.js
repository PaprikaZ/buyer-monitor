// Generated by CoffeeScript 1.8.0
var DBClient, Seed, Visitor, async, config, fs, launch, launchMonitor, path, productFile, request, verifyUserTokens;

fs = require('fs');

path = require('path');

async = require('async');

request = require('request');

config = require('./config.js');

Visitor = require('./visitor.js');

Seed = require('./seed.js');

DBClient = require('./db_client.js');

productFile = '../product.json';

verifyUserTokens = function(callback) {
  var accessTokens, verifyToken;
  accessTokens = config.accounts.map(function(account) {
    return account.accessToken;
  });
  verifyToken = function(token) {
    var makeVerifyOK, options, printSuccess, shortToken;
    options = {
      url: config.userServiceUrl,
      auth: {
        user: token
      }
    };
    shortToken = token.slice(0, 7);
    makeVerifyOK = function() {
      var counter;
      counter = accessTokens.length;
      return function() {
        counter -= 1;
        if (counter === 0) {
          logger.info("all access tokens verify done.");
          callback();
        }
      };
    };
    printSuccess = makeVerifyOK();
    request.get(options, function(err, res, body) {
      if (!err && res.statusCode === 200) {
        return printSuccess();
      } else if (err) {
        logger.error("token %s verify caught request error.", shortToken);
        logger.error("%s", err);
        logger.error("account access token verify caught failed, exit.");
        process.exit();
      } else if (res.statusCode === 401) {
        accessTokens = accessTokens.filter(function(elt) {
          return elt !== token;
        });
        logger.warn("token %s is invalid, removed.", shortToken);
        logger.warn("status code: %s", res.statusCode);
        logger.warn("error message: %s", body);
      } else {
        logger.warn("token %s verify response error", shortToken);
        logger.warn("status code: %s", res.statusCode);
        logger.warn("error message: %s", body);
      }
    });
  };
  logger.info("user access tokens verifying ...");
  accessTokens.map(verifyToken);
};

launchMonitor = function() {
  var asyncParallelRequests, client, delaySeed, iterate, seeds, visit;
  seeds = JSON.parse(fs.readFileSync(path.join(__dirname, productFile))).map(function(item) {
    return new Seed(item);
  });
  logger.info("load seeds ok.");
  delaySeed = function(id, site) {
    var resendDelay;
    resendDelay = config.resendDelay;
    seeds = seeds.filter(function(elt) {
      return elt.id !== id || elt.site !== site;
    });
    seeds.filter(function(elt) {
      return elt.id === id && elt.site === site;
    }).forEach(function(elt) {
      var pushSeedBack;
      pushSeedBack = function() {
        seeds.push(elt);
      };
      logger.info("product id %s site %s delayed.", elt.id, elt.site);
      setTimeout(pushSeedBack, resendDelay);
    });
  };
  visit = function(seed) {
    var v;
    v = Visitor(seed);
    v.visit();
  };
  asyncParallelRequests = function() {
    if (seeds.length !== 0) {
      async.map(seeds, visit, function(err, results) {
        logger.error(err);
      });
    }
  };
  client = DBClient();
  client.del(config.pushQueueKey, function(err, res) {
    if (err) {
      logger.error("Clear push queue %s failed.", config.pushQueueKey);
      logger.error("%s", err);
      process.exit();
    }
  });
  logger.info("Launcher clear push queue ok.");
  iterate = function() {
    var iter;
    iter = function() {
      return client.rpop(config.pushQueueKey, function(err, res) {
        var item;
        item = JSON.parse(res);
        logger.debug("pop delay id %s site %s", item.id, item.site);
        if (item) {
          delaySeed(item.id, item.site);
          iter();
        } else {
          logger.debug("iteration done.");
          asyncParallelRequests();
        }
      });
    };
    iter();
  };
  asyncParallelRequests();
  return setInterval(iterate, config.monitorInterval);
};

launch = function() {
  verifyUserTokens(launchMonitor);
};

module.exports.launch = function() {
  require('./argv_parser.js').parse(process.argv.slice(2), launch);
};

module.exports.config = require('./config.js');

module.exports.argvParser = require('./argv_parser.js');

module.exports.DBClient = require('./db_client.js');

module.exports.Messenger = require('./messenger.js');

module.exports.PageParser = require('./page_parser.js');

module.exports.Seed = require('./seed.js');

module.exports.Visitor = require('./visitor.js');
