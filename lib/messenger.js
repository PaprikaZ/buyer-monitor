// Generated by CoffeeScript 1.8.0
var PARSE_FIELDS, PRODUCT_BASE_FIELDS, accessTokens, assembleMessageBody, assembleMessageTitle, config, push, request, requestErrorHandler, responseErrorHandler, resultErrorHandler, tokenEmptyHandler, util;

util = require('util');

request = require('request');

config = require('./config.js');

PARSE_FIELDS = require('./page_parser.js').MANDATORY_FIELDS;

PRODUCT_BASE_FIELDS = require('./seed.js').MANDATORY_BASE_FIELDS;

accessTokens = config.accounts.map(function(account) {
  return account.accessToken;
});

assembleMessageTitle = function(result) {
  var title;
  if (PRODUCT_BASE_FIELDS.reduce((function(partial, field) {
    return partial && result[field];
  }), true)) {
    title = util.format('id %s on site %s meet your requirement', result.id, result.site);
  } else {
    logger.error('there is product base field missing');
    resultErrorHandler();
  }
  return title;
};

assembleMessageBody = function(result) {
  var body;
  if (PARSE_FIELDS.reduce((function(partial, field) {
    return partial && result[field];
  }), true)) {
    body = util.format('Title: %s\n', result.title);
    body += util.format('Url: %s\n', result.url);
    body += util.format('Price: %s        full price: %s\n', result.price, result.fullPrice);
    body += util.format('Discount: %s\% OFF\n', Math.round(result.discount));
    body += util.format('Review: %s\n', result.review);
    body += util.format('Instore: %s\n', typeof result.instore === "function" ? result.instore({
      'yes': 'no'
    }) : void 0);
    if (0 < result.benefits.length) {
      result.benefits.forEach(function(benefit, idx) {
        body += util.format('Benefit%s: %s\n', idx, benefit);
      });
    } else {
      body += 'Benefits: none\n';
    }
  } else {
    logger.error('there is parse field missing');
    resultErrorHandler();
  }
  return body;
};

push = function(result) {
  var messenge;
  logger.debug('id %s site %s ready to be pushed', result.id, result.site);
  if (0 < accessTokens.length) {
    messenge = {
      type: 'note',
      title: assembleMessageTitle(result),
      body: assembleMessageBody(result)
    };
    accessTokens.map(function(token) {
      var postOptions, shortToken;
      shortToken = token.slice(0, 7);
      postOptions = {
        url: config.pushServiceUrl,
        auth: {
          user: token
        },
        headers: {
          'content-type': 'application/json'
        },
        body: JSON.stringify(messenge)
      };
      return request.post(postOptions, function(err, res, body) {
        if (!err) {
          if (res.statusCode === 200) {
            logger.info('push message to user %s ok.', shortToken);
          } else {
            responseErrorHandler(shortToken, res, body);
          }
        } else {
          requestErrorHandler(shortToken, err);
        }
      });
    });
  } else {
    logger.error('no available tokens');
    tokenEmptyHandler();
  }
};

tokenEmptyHandler = function() {
  throw new Error('no available tokens');
};

resultErrorHandler = function() {
  throw new Error('result attributes error');
};

responseErrorHandler = function(token, res, body) {
  logger.error('http post response error.');
  logger.error('token %s response status code: %s', token, res.statusCode);
  logger.error('token %s body: %s', token, body);
  throw new Error('push message response error');
};

requestErrorHandler = function(token, err) {
  logger.error('http post request error.');
  logger.error('token %s, error %s', token, err.message);
  throw err;
};

module.exports.push = push;
