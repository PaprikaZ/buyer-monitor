// Generated by CoffeeScript 1.8.0
var AVAILABLE_COMPARES, AVAILABLE_VERDICT_FIELDS, MANDATORY_BASE_FIELDS, addHandler, config, fs, helpHandler, invalidResponseHandler, listHandler, missingArgHandler, path, removeHandler, resetHandler, unknownArgvHandler, util, verdictNotFoundHandler, verdictsFileName, _seed;

util = require('util');

fs = require('fs');

path = require('path');

_seed = require('./seed.js');

AVAILABLE_COMPARES = _seed.AVAILABLE_COMPARES;

MANDATORY_BASE_FIELDS = _seed.MANDATORY_BASE_FIELDS;

AVAILABLE_VERDICT_FIELDS = _seed.AVAILABLE_VERDICT_FIELDS;

config = require('./config.js');

verdictsFileName = path.join(__dirname, '../', config.verdictsFileName);

unknownArgvHandler = function() {
  console.error('unknown arguments, please see help with "node app.js help"');
  throw new Error('input error, unknown arguments');
};

missingArgHandler = function() {
  console.error('missing arguments, please see help with "node app.js help"');
  throw new Error('input error, missing arguments');
};

verdictNotFoundHandler = function(id, site) {
  console.error('verdict id %s site %s not found', id, site);
  console.error('please check with "node app.js list"');
  throw new Error('input error, verdict not founded');
};

invalidResponseHandler = function(res) {
  console.error('invalid response %s', res);
  throw new Error('input error, invalid response');
};

helpHandler = function() {
  console.log('Usage:');
  console.log('  node app.js');
  console.log('    list');
  console.log('    add id <id> site <site> [<verdict> <compare> <target>] ...');
  console.log('    remove id <id> site <site>');
  console.log('    reset');
  console.log('    help');
  console.log('');
  console.log('  list all existing verdict records');
  console.log('  > node app.js list');
  console.log('');
  console.log('  add product id B00JG8GOWU site www.example.com with price verdict');
  console.log('  > node app.js add id B00JG8GOWU site www.example.com <verdict ...>');
  console.log('    once price under 12 will be pushed');
  console.log('    > price under 12');
  console.log('');
  console.log('    once discount above 20% will be pushed');
  console.log('    > price discount above 20');
  console.log('');
  console.log('    once review above 8 will be pushed');
  console.log('    > review above 8');
  console.log('');
  console.log('    once instored will be pushed');
  console.log('    > instore yes');
  console.log('');
  console.log('    once benefits match regexp will be pushed');
  console.log('    > benefits /buy two with one off/i');
  console.log('');
  console.log('    available verdicts:');
  console.log('    price, discount, review, instore, benefits');
  console.log('    available compare:');
  console.log('    under, above');
  console.log('');
  console.log('  remove product id B00JG8GOWU on site www.example.com');
  console.log('  > node app.js remove id B00JG8GOWU site www.amazon.com');
  console.log('');
  console.log('  reset all verdict records');
  console.log('  > node app.js reset');
  console.log('');
  console.log('  to see help page');
  console.log('  > node app.js help');
  console.log('');
  console.log('The verdicts records located in verdicts.json at application root.');
};

listHandler = function() {
  var verdicts;
  console.log('Products verdicted:');
  verdicts = JSON.parse(fs.readFileSync(verdictsFileName));
  if (0 < verdicts.length) {
    verdicts.forEach(function(verdict) {
      var output;
      output = '';
      MANDATORY_BASE_FIELDS.map(function(field) {
        output += util.format(', %s %s', field, verdict[field]);
      });
      AVAILABLE_VERDICT_FIELDS.map(function(field) {
        if (verdict[field]) {
          if (verdict[field].compare === 'equal') {
            output += util.format(', %s? %s', field, verdict[field].target);
          } else if (field === 'benefits' && verdict[field].compare === 'match') {
            output += util.format(', benefits match \/%s\/%s', verdict[field].target.regex, verdict[field].target.option);
          } else {
            output += util.format(', %s %s %s', field, verdict[field].compare, verdict[field].target);
          }
        }
      });
      output = output.slice(2);
      console.log(output);
    });
  } else {
    console.log('empty');
  }
  console.log('\nlist done.');
};

addHandler = function(argv) {
  var analyze, writeRecord;
  analyze = function() {
    var iter, keywordIter, record;
    record = {};
    keywordIter = function(remaining, parse) {
      if (1 < remaining.length) {
        if (AVAILABLE_COMPARES.indexOf(remaining[0]) !== -1) {
          return {
            compare: remaining[0],
            target: parse(remaining[1])
          };
        } else {
          unknownArgvHandler();
        }
      } else {
        missingArgHandler();
      }
    };
    iter = function(remaining) {
      if (remaining.length === 0) {
        return;
      } else if (remaining[0] === 'id') {
        if (1 < remaining.length) {
          record.id = remaining[1];
          iter(remaining.slice(2));
        } else {
          missingArgHandler();
        }
      } else if (remaining[0] === 'site') {
        if (1 < remaining.length) {
          record.site = remaining[1];
          iter(remaining.slice(2));
        } else {
          missingArgHandler();
        }
      } else if (remaining[0] === 'price') {
        record.price = keywordIter(remaining.slice(1, 3), parseInt);
        iter(remaining.slice(3));
      } else if (remaining[0] === 'discount') {
        record.discount = keywordIter(remaining.slice(1, 3), parseInt);
        iter(remaining.slice(3));
      } else if (remaining[0] === 'review') {
        record.review = keywordIter(remaining.slice(1, 3), parseInt);
        iter(remaining.slice(3));
      } else if (remaining[0] === 'instore') {
        record.instore = keywordIter(['equal'].concat(remaining.slice(1, 2)), function(x) {
          switch (x) {
            case 'yes':
              return true;
            case 'y':
              return true;
            case 'no':
              return false;
            case 'n':
              return false;
            default:
              return unknownArgvHandler();
          }
        });
        iter(remaining.slice(2));
      } else if (remaining[0] === 'benefits') {
        record.benefits = keywordIter(['match'].concat(remaining.slice(1, 2)), function(x) {
          var matches, regex;
          regex = /^\/(.*)\/(i?)$/;
          matches = x.match(regex);
          return {
            regex: matches[1],
            option: matches[2]
          };
        });
        iter(remaining.slice(2));
      } else {
        unknownArgvHandler();
      }
    };
    iter(argv);
    if (MANDATORY_BASE_FIELDS.every(function(field) {
      return record[field];
    }) && AVAILABLE_VERDICT_FIELDS.some(function(field) {
      return record[field];
    })) {
      return record;
    } else {
      missingArgHandler();
    }
  };
  writeRecord = function(record) {
    var filteredVerdicts, verdicts;
    verdicts = JSON.parse(fs.readFileSync(verdictsFileName));
    filteredVerdicts = verdicts.filter(function(elt) {
      return elt.id !== record.id || elt.site !== record.site;
    });
    filteredVerdicts.push(record);
    fs.writeFileSync(verdictsFileName, JSON.stringify(filteredVerdicts));
    if (filteredVerdicts.length === verdicts.length) {
      console.log('id %s, site %s update done.', record.id, record.site);
    } else {
      console.log('add done.');
    }
  };
  writeRecord(analyze());
};

removeHandler = function(argv) {
  var analyze, filteredVerdicts, id, site, verdicts, _ref;
  analyze = function() {
    var id, iter, site, _ref;
    _ref = [false, false], id = _ref[0], site = _ref[1];
    iter = function(remaining) {
      if (remaining.length === 0) {
        return [id, site];
      } else if (1 < remaining.length && remaining[0] === 'id') {
        id = remaining[1];
      } else if (1 < remaining.length && remaining[0] === 'site') {
        site = remaining[1];
      } else if (remaining.length < 2) {
        missingArgHandler();
      } else {
        unknownArgvHandler();
      }
      return iter(remaining.slice(2));
    };
    return iter(argv);
  };
  _ref = analyze(), id = _ref[0], site = _ref[1];
  if (id && site) {
    verdicts = JSON.parse(fs.readFileSync(verdictsFileName));
    filteredVerdicts = verdicts.filter(function(elt) {
      return elt.id !== id || elt.site !== site;
    });
    if (filteredVerdicts.length < verdicts.length) {
      fs.writeFileSync(verdictsFileName, JSON.stringify(filteredVerdicts));
      console.log('remove done.');
    } else {
      verdictNotFoundHandler(id, site);
    }
  } else {
    missingArgHandler();
  }
};

resetHandler = function() {
  process.stdout.write('Are you sure to reset product data? [yes/no] ');
  process.stdin.setEncoding('utf8');
  process.stdin.once('data', function(input) {
    input = input.trim().toLowerCase();
    if (input === 'y' || input === 'yes') {
      fs.writeFileSync(verdictsFileName, JSON.stringify([]));
    } else if (input === 'n' || input === 'no') {
      console.log('reset aborted by user');
    } else {
      invalidResponseHandler(input);
    }
  });
};

module.exports.parse = function(argv, launch) {
  if (argv.length === 0) {
    launch();
  } else if (argv[0] === 'add' && 1 < argv.length) {
    addHandler(argv.slice(1));
  } else if (argv[0] === 'remove' && 1 < argv.length) {
    removeHandler(argv.slice(1));
  } else if (argv[0] === 'list' && argv.length === 1) {
    listHandler();
  } else if (argv[0] === 'reset' && argv.length === 1) {
    resetHandler();
  } else if (argv[0] === 'help' && argv.length === 1) {
    helpHandler();
  } else {
    unknownArgvHandler();
  }
};
