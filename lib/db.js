// Generated by CoffeeScript 1.8.0
var config, fs, mongoClient, mongoErrorRethrow, mongoose, redis, redisClient, redisErrorRethrow, spawn;

fs = require('fs');

spawn = require('child_process').spawn;

redis = require('redis');

mongoose = require('mongoose');

config = require('./config.js');

exports.startDBService = function() {
  var err;
  logger.info('starting redis/mongodb service');
  try {
    fs.unlinkSync(config.redisPidFile);
    fs.unlinkSync(config.mongoPidFile);
  } catch (_error) {
    err = _error;
  } finally {
    spawn(config.redisCommand, [config.redisConfFile]);
    spawn(config.mongoCommand, ['-f', config.mongoConfFile]);
  }
};

exports.stopDBService = function() {
  var err;
  logger.info('stopping redis/mongodb service');
  redisClient.quit();
  mongoose.disconnect();
  setTimeout((function() {
    spawn('pkill', ['--pidfile', config.redisPidFile]);
    spawn('pkill', ['--pidfile', config.mongoPidFile]);
  }), 500);
  try {
    fs.unlinkSync(config.mongoPidFile);
  } catch (_error) {
    err = _error;
    logger.warn('mongod is already stopped');
  }
};

redisClient = null;

redisErrorRethrow = function(err) {
  logger.error('redis caught error');
  logger.error('msg: %s', err.message);
  throw err;
};

exports.connectRedis = function() {
  redisClient = redis.createClient(config.redisPort, config.redisHost);
  redisClient.select(config.redisDBIndex, function(err, res) {
    if (err) {
      logger.error('redis select %s failed', config.redisDBIndex);
      redisErrorRethrow(err);
    } else {
      logger.debug('redis select %s %s', config.redisDBIndex, res);
    }
  });
  redisClient.on('error', function(err) {
    redisErrorRethrow(err);
  });
};

exports.getRedisClient = function() {
  if (redisClient) {
    return redisClient;
  } else {
    logger.debug('redis client should be created just after monitor launched');
    throw new Error('redis client not initialized');
  }
};

exports.clearQueue = function() {
  return redisClient.flushdb();
};

exports.redisErrorRethrow = redisErrorRethrow;

mongoClient = null;

mongoErrorRethrow = function(err) {
  logger.error('mongo caught error');
  logger.error('msg: %s', err.message);
  throw err;
};

exports.connectMongoDB = function() {
  mongoClient = mongoose.connect(config.mongoDBUrl, config.mongoConnectionOptions);
};

exports.getMongoClient = function() {
  if (mongoClient) {
    return mongoClient;
  } else {
    logger.debug('mongo client should be created just adter monitor launched');
    throw new Error('mongo db client not initialized');
  }
};

exports.mongoErrorRethrow = mongoErrorRethrow;

module.exports = exports;
