// Generated by CoffeeScript 1.8.0
var client, config, redis, redisErrorRethrow, redisRecordDBIndex;

redis = require('redis');

config = require('./config.js');

redisRecordDBIndex = config.redisRecordDBIndex;

client = null;

redisErrorRethrow = function(err) {
  logger.error('redis database caught error');
  logger.error('msg: %s', err.message);
  throw err;
};

exports.createClient = function() {
  client = redis.createClient(config.redisPort, config.redisHost);
  client.select(redisRecordDBIndex, function(err, res) {
    if (err) {
      logger.error('redis select %s failed', redisRecordDBIndex);
      redisErrorRethrow(err);
    } else {
      logger.debug('redis select %s %s', redisRecordDBIndex, res);
    }
  });
  client.on('error', function(err) {
    redisErrorRethrow(err);
  });
};

exports.getClient = function() {
  if (client) {
    return client;
  } else {
    logger.debug('database client should be created just after monitor launched');
    throw new Error('client not initialized');
  }
};

exports.clearQueue = function() {
  client.del(config.redisPushQueueKey, function(err, res) {
    if (err) {
      logger.error('clear push queue %s failed', config.redisPushQueueKey);
      logger.error('%s', err.message);
      throw err;
    } else {
      logger.debug('clear push queue response: %s', res);
    }
  });
  client.del(config.redisPullQueueKey, function(err, res) {
    if (err) {
      logger.error('clear pull queue %s failed', config.redisPullQueueKey);
      logger.error('%s', err.message);
      throw err;
    } else {
      logger.debug('clear pull queue response: %s', res);
    }
  });
};

exports.redisErrorRethrow = redisErrorRethrow;

module.exports = exports;
