// Generated by CoffeeScript 1.8.0
var AVAILABLE_COMPARES, MANDATORY_BASE_FIELDS, MANDATORY_VERDICT_FIELDS, Seed, config, generateProductUrl, htmlSuffix, httpPrefix, httpsPrefix, illegalTypeHandler, noneVerdictLoadedHandler, siteNotSupportHandler, siteTable, verdictMissingHandler, _MANDATORY_VERDICT_METHODS;

config = require('./config.js');

httpPrefix = 'http://';

httpsPrefix = 'https://';

htmlSuffix = '.html';

MANDATORY_BASE_FIELDS = ['id', 'site'];

MANDATORY_VERDICT_FIELDS = ['price', 'discount', 'instore', 'review', 'benefits'];

AVAILABLE_COMPARES = ['above', 'under', 'equal', 'match'];

_MANDATORY_VERDICT_METHODS = MANDATORY_VERDICT_FIELDS.map(function(field) {
  return 'verdict' + field.slice(0, 1).toUpperCase() + field.substring(1);
});

siteTable = {
  amazonCN: {
    site: 'www.amazon.cn',
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  },
  amazonUS: {
    site: 'www.amazon.com',
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  },
  amazonJP: {
    site: 'www.amazon.co.jp',
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + '/dp/' + productId;
    }
  },
  jingdong: {
    site: 'www.jd.com',
    generateProductUrl: function(productId) {
      return httpPrefix + this.site.replace('www', 'item') + '/' + productId + htmlSuffix;
    }
  }
};

generateProductUrl = function(site, id) {
  var matchedItems, self, _;
  matchedItems = (function() {
    var _results;
    _results = [];
    for (_ in siteTable) {
      self = siteTable[_];
      if (self.site === site) {
        _results.push(self);
      }
    }
    return _results;
  })();
  if (0 < matchedItems.length) {
    return matchedItems.pop().generateProductUrl(id);
  } else {
    siteNotSupportHandler(site);
  }
};

siteNotSupportHandler = function(site) {
  logger.error('site %s is not support yet');
  throw new Error('product site not support error');
};

illegalTypeHandler = function(id, site, field) {
  logger.error('id %s site %s %s verdict with a illegal value', id, site, field);
  throw new Error('product illegal verdict value error');
};

verdictMissingHandler = function(id, site) {
  logger.error('id %s site %s missing verdict field', id, site);
  throw new Error('product missing verdict field error');
};

noneVerdictLoadedHandler = function(id, site) {
  logger.error('id %s site %s none verdict loaded', id, site);
  throw new Error('none verdict loaded');
};

Seed = (function() {
  function Seed(product) {
    var regex, self;
    self = this;
    MANDATORY_BASE_FIELDS.map(function(field) {
      return self[field] = product[field];
    });
    this.url = generateProductUrl(product.site, product.id);
    (function() {
      var verdictLoaded;
      verdictLoaded = false;
      MANDATORY_VERDICT_FIELDS.map(function(field) {
        if (product[field]) {
          if (product[field].target !== 'null') {
            self[field] = product[field];
            verdictLoaded = true;
          } else {
            illegalTypeHandler(product.id, product.site, field);
          }
        }
      });
      !verdictLoaded && verdictMissingHandler(product.id, product.site);
    })();
    if (product.price) {
      this.verdictPrice = function(x) {
        return x.price < product.price.target;
      };
    }
    if (product.discount) {
      this.verdictDiscount = function(x) {
        return product.discount.target < x.discount;
      };
    }
    if (product.review) {
      this.verdictReview = function(x) {
        return product.review.target < x.review;
      };
    }
    if (product.instore) {
      this.verdictInstore = function(x) {
        return x.instore === product.instore;
      };
    }
    if (product.benefits) {
      regex = new RegExp(product.benefits.regex, product.benefits.option);
      this.verdictBenefits = function(x) {
        return x.benefits.some(function(elt) {
          return regex.test(elt);
        });
      };
    }
    if (_MANDATORY_VERDICT_METHODS.filter(function(verdict) {
      return self[verdict];
    }).length === 0) {
      noneVerdictLoadedHandler(product.id, product.site);
    }
    return;
  }

  Seed.prototype.verdict = function(result) {
    var ret, self;
    self = this;
    ret = _MANDATORY_VERDICT_METHODS.filter(function(verdict) {
      return self[verdict];
    }).reduce((function(partial, verdict) {
      return partial && self[verdict](result);
    }), true);
    return ret;
  };

  return Seed;

})();

module.exports.Seed = Seed;

module.exports.MANDATORY_BASE_FIELDS = MANDATORY_BASE_FIELDS;

module.exports.MANDATORY_VERDICT_FIELDS = MANDATORY_VERDICT_FIELDS;

module.exports.AVAILABLE_COMPARES = AVAILABLE_COMPARES;
