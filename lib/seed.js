// Generated by CoffeeScript 1.8.0
var MANDATORY_BASE_FIELD, MANDATORY_VERDICT_FIELD, Seed, getProductUrl, htmlSuffix, httpPrefix, httpsPrefix, returnFalse, siteTable;

httpPrefix = 'http://';

httpsPrefix = 'https://';

htmlSuffix = '.html';

MANDATORY_BASE_FIELD = ['id', 'site'];

MANDATORY_VERDICT_FIELD = ['price', 'discount', 'instore', 'review'];

siteTable = {
  amazonCN: {
    site: "www.amazon.cn",
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + "/dp/" + productId;
    }
  },
  amazonUS: {
    site: "www.amazon.com",
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + "/dp/" + productId;
    }
  },
  amazonJP: {
    site: "www.amazon.co.jp",
    generateProductUrl: function(productId) {
      return httpPrefix + this.site + "/dp/" + productId;
    }
  },
  jingdong: {
    site: "www.jd.com",
    generateProductUrl: function(productId) {
      return httpPrefix + this.site.replace("www", "item") + "/" + productId + htmlSuffix;
    }
  }
};

getProductUrl = function(site, id) {
  var self, _;
  return ((function() {
    var _results;
    _results = [];
    for (_ in siteTable) {
      self = siteTable[_];
      if (self.site === site) {
        _results.push(self);
      }
    }
    return _results;
  })()).pop().generateProductUrl(id);
};

returnFalse = function() {
  return false;
};

Seed = (function() {
  function Seed(product) {
    var attr, regex, reviewStar, score, val;
    for (attr in product) {
      val = product[attr];
      this[attr] = val;
    }
    this.url = getProductUrl(this.site, this.id);
    if (product.price && product.price.compare === 'under') {
      this.verdictPrice = function(x) {
        return x < product.price.target;
      };
    } else if (!product.price) {
      this.verdictPrice = returnFalse;
    } else {
      logger.error("unknown price compare keyword %s", product.price.compare);
      process.exit();
    }
    if (product.discount && product.discount.comapre === 'above') {
      this.verdictDiscount = function(x) {
        return product.discount.target < x;
      };
    } else if (!product.discount) {
      this.verdictDiscount = returnFalse;
    } else {
      logger.error("unknown discount compare keyword %s", product.discount.compare);
      process.exit();
    }
    reviewStar = ["zero", "half", "one", "one-half", "two", "two-half", "three", "three-half", "four", "four-half", "five"];
    if (product.review && (product.review.compare = 'above')) {
      score = reviewStar.indexOf(product.review);
      if (score !== -1) {
        this.verdictReview = function(x) {
          return product.review.target < x;
        };
      } else {
        logger.error("unknown review target keyword %s", product.review.target);
      }
    } else if (!product.review) {
      this.verdictReview = returnFalse;
    } else {
      logger.error("unknown review compare keyword %s", product.review.compare);
      process.exit;
    }
    if (product.benefit) {
      regex = new Regex(product.benefit.regex, product.benefit.option);
      this.verdictBenefits = function(benefits) {
        return benefits.some(function(elt, idx, arr) {
          return regex.test(elt);
        });
      };
    } else {
      this.verdictBenefits = returnFalse;
    }
  }

  Seed.prototype.verdict = function(result) {
    var ret;
    ret = false;
    ret = this.verdictPrice(result.price) || this.verdictDiscount(result.discount);
    ret = ret && this.verdictReview(result.review);
    ret = ret && this.verdictBenefits(result.benefits);
    return ret;
  };

  return Seed;

})();

module.exports.Seed = Seed;

module.exports.MANDATORY_BASE_FIELD = MANDATORY_BASE_FIELD;

module.exports.MANDATORY_VERDICT_FIELD = MANDATORY_VERDICT_FIELD;
