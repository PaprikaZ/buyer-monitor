// Generated by CoffeeScript 1.8.0
var Seed, fs, path, pickVerdict, rewire, sinon, urlToHtmlTable, verdicts, visitor;

sinon = require('sinon');

fs = require('fs');

path = require('path');

rewire = require('rewire');

Seed = require('../lib/seed.js').Seed;

verdicts = require('./cache/builder.js').generateVerdicts();

pickVerdict = function() {
  var idx, max, min;
  min = 0;
  max = verdicts.length - 1;
  idx = Math.floor(Math.random() * (max - min + 1) + min);
  return verdicts[idx];
};

urlToHtmlTable = require('./cache/html.json');

visitor = rewire('../lib/visitor.js');

describe('visitor', function() {
  var Visitor, createVisitor, testAmazonCNProduct, testAmazonJPProduct, testAmazonUSProduct, testJingDongProduct, testUnknownSiteProduct;
  createVisitor = visitor.createVisitor;
  Visitor = visitor.__get__('Visitor');
  visitor.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      warn: function() {},
      error: function() {}
    },
    db: {
      getClient: function() {
        return {
          lpush: function() {}
        };
      }
    }
  });
  testAmazonCNProduct = {
    id: 'testamazoncnid',
    site: 'www.amazon.cn',
    price: {
      compare: 'under',
      target: 80
    }
  };
  testAmazonUSProduct = {
    id: 'testamazonusid',
    site: 'www.amazon.com',
    discount: {
      compare: 'above',
      target: 50
    }
  };
  testAmazonJPProduct = {
    id: 'testamazonjpid',
    site: 'www.amazon.co.jp',
    instore: {
      compare: 'equal',
      target: true
    }
  };
  testJingDongProduct = {
    id: 'testjingdongid',
    site: 'www.jd.com',
    review: {
      compare: 'above',
      target: 8
    }
  };
  testUnknownSiteProduct = {
    id: 'testunknownsiteid',
    site: 'www.example.com',
    review: {
      compare: 'above',
      target: 9
    }
  };
  describe('create', function() {
    it('should given amazon cn visitor when seed site be www.amazon.cn', function() {
      var AmazonCNVisitor, v;
      AmazonCNVisitor = visitor.__get__('AmazonCNVisitor');
      v = createVisitor(new Seed(testAmazonCNProduct));
      v.should.be.a.AmazonCNVisitor;
    });
    it('should given amazon us visitor when seed site be www.amazon.com', function() {
      var AmazonUSVisitor, v;
      AmazonUSVisitor = visitor.__get__('AmazonUSVisitor');
      v = createVisitor(new Seed(testAmazonUSProduct));
      v.should.be.a.AmazonUSVisitor;
    });
    it('should given amazon jp visitor when seed site be www.amazon.co.jp', function() {
      var AmazonJPVisitor, v;
      AmazonJPVisitor = visitor.__get__('AmazonJPVisitor');
      v = createVisitor(new Seed(testAmazonJPProduct));
      v.should.be.a.AmazonJPVisitor;
    });
    it('should given jingdong visitor when seed site be www.jd.com', function() {
      var JingDongVisitor, v;
      JingDongVisitor = visitor.__get__('JingDongVisitor');
      v = createVisitor(new Seed(testJingDongProduct));
      v.should.be.a.JingDongVisitor;
    });
    it('should throw error when seed site not support', function() {
      createVisitor.bind(null, {
        site: 'www.example.com'
      }).should["throw"]('no available visitor');
    });
  });
  describe('visit', function() {
    it('should transfer control to page handler when everything ok', function() {
      var called, revert, v;
      called = false;
      revert = visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(null, {
              statusCode: 200
            }, 'test body');
          }
        }
      });
      v = createVisitor(new Seed(testAmazonCNProduct));
      v.processPage = function(body) {
        called = true;
        body.should.equal('test body');
      };
      v.visit();
      called.should.be["true"];
      revert();
    });
    it('should bypass error when request caught error', function() {
      var revert, v;
      revert = visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(new Error('test mock error'));
          }
        }
      });
      v = createVisitor(new Seed(testAmazonCNProduct));
      v.visit.bind(v).should["throw"]('test mock error');
      revert();
    });
    it('should log the response when response is nok', function() {
      var called, revert, v;
      called = false;
      revert = visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(null, {
              statusCode: 201
            }, 'test body');
          }
        }
      });
      v = createVisitor(new Seed(testAmazonCNProduct));
      v.errorResponseHandler = function(res, body) {
        called = true;
        return v.constructor.prototype.errorResponseHandler(res, body);
      };
      v.visit();
      called.should.be["true"];
      revert();
    });
  });
});
