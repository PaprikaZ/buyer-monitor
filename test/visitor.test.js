// Generated by CoffeeScript 1.8.0
var Seed, rewire;

rewire = require('rewire');

Seed = require('../lib/seed.js').Seed;

describe('visitor module', function() {
  var AmazonCNVisitor, AmazonJPVisitor, AmazonUSVisitor, JingDongVisitor, createVisitor, testAmazonCNSeed, testAmazonCNVerdict, testAmazonJPSeed, testAmazonJPVerdict, testAmazonUSSeed, testAmazonUSVerdict, testJingDongSeed, testJingDongVerdict, visitor;
  visitor = rewire('../lib/visitor.js');
  visitor.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      warn: function() {},
      error: function() {}
    },
    db: {
      getClient: function() {
        return {
          lpush: function() {}
        };
      }
    },
    createParser: {
      parse: function() {
        return {
          title: 'test title',
          price: 100,
          fullPrice: 200,
          review: 9,
          instore: true,
          benefits: [],
          discount: 50
        };
      }
    }
  });
  createVisitor = visitor.createVisitor;
  AmazonCNVisitor = visitor.__get__('AmazonCNVisitor');
  AmazonUSVisitor = visitor.__get__('AmazonUSVisitor');
  AmazonJPVisitor = visitor.__get__('AmazonJPVisitor');
  JingDongVisitor = visitor.__get__('JingDongVisitor');
  testAmazonCNVerdict = {
    id: 'testamazoncnid',
    site: 'www.amazon.cn',
    price: {
      compare: 'under',
      target: 80
    }
  };
  testAmazonCNSeed = new Seed(testAmazonCNVerdict);
  testAmazonUSVerdict = {
    id: 'testamazonusid',
    site: 'www.amazon.com',
    discount: {
      compare: 'above',
      target: 50
    }
  };
  testAmazonUSSeed = new Seed(testAmazonUSVerdict);
  testAmazonJPVerdict = {
    id: 'testamazonjpid',
    site: 'www.amazon.co.jp',
    instore: {
      compare: 'equal',
      target: true
    }
  };
  testAmazonJPSeed = new Seed(testAmazonJPVerdict);
  testJingDongVerdict = {
    id: 'testjingdongid',
    site: 'www.jd.com',
    review: {
      compare: 'above',
      target: 8
    }
  };
  testJingDongSeed = new Seed(testJingDongVerdict);
  describe('create visitor', function() {
    var called, makeCalledFalse, makeCalledTrue, restore;
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = visitor.__set__({
        invalidSiteHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should given amazon cn visitor when seed site be www.amazon.cn', function() {
      var v;
      v = createVisitor(testAmazonCNSeed);
      v.should.be.a.AmazonCNVisitor;
    });
    it('should given amazon us visitor when seed site be www.amazon.com', function() {
      var v;
      AmazonUSVisitor = visitor.__get__('AmazonUSVisitor');
      v = createVisitor(testAmazonUSSeed);
      v.should.be.a.AmazonUSVisitor;
    });
    it('should given amazon jp visitor when seed site be www.amazon.co.jp', function() {
      var v;
      AmazonJPVisitor = visitor.__get__('AmazonJPVisitor');
      v = createVisitor(testAmazonJPSeed);
      v.should.be.a.AmazonJPVisitor;
    });
    it('should given jingdong visitor when seed site be www.jd.com', function() {
      var v;
      JingDongVisitor = visitor.__get__('JingDongVisitor');
      v = createVisitor(testJingDongSeed);
      v.should.be.a.JingDongVisitor;
    });
    it('should route to invalid site handler when seed site not support', function() {
      visitor.__set__('invalidSiteHandler', makeCalledTrue);
      createVisitor({
        site: 'www.example.com'
      });
      called.should.be["true"];
    });
  });
  describe('visit', function() {
    var called, makeCalledFalse, makeCalledTrue, restore;
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = true;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = visitor.__set__({
        request: {
          get: function() {}
        },
        requestErrorHandler: function() {},
        responseErrorHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should route to page process when request ok', function() {
      var v;
      visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(null, {
              statusCode: 200
            }, 'foo');
          }
        }
      });
      v = createVisitor(testAmazonCNSeed);
      v.processPage = function(body) {
        makeCalledTrue();
        body.should.equal('foo');
      };
      v.visit();
      called.should.be["true"];
    });
    it('should route to request error handler when request caught error', function() {
      var v;
      visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(new Error('test mock error'));
          }
        },
        requestErrorHandler: function(visitor, url, err) {
          makeCalledTrue();
          visitor.should.equal(AmazonCNVisitor);
          err.message.should.equal('test mock error');
        }
      });
      v = createVisitor(testAmazonCNSeed);
      v.visit();
      called.should.be["true"];
    });
    it('should route to response error handler when response nok', function() {
      var v;
      visitor.__set__({
        request: {
          get: function(url, callback) {
            callback(null, {
              statusCode: -1
            }, 'bar');
          }
        },
        responseErrorHandler: function(visitor, res, body) {
          makeCalledTrue();
          visitor.should.equal(AmazonCNVisitor);
          body.should.equal('bar');
        }
      });
      v = createVisitor(testAmazonCNSeed);
      v.visit();
      called.should.be["true"];
    });
  });
  describe('request error handler', function() {
    var requestErrorHandler;
    requestErrorHandler = visitor.__get__('requestErrorHandler');
    it('should throw error', function() {
      requestErrorHandler.bind(null, AmazonCNVisitor, '', new Error('mock error')).should["throw"]('mock error');
    });
  });
  describe('response error handler', function() {
    var responseErrorHandler;
    responseErrorHandler = visitor.__get__('responseErrorHandler');
    it('should not throw error', function() {
      responseErrorHandler.bind(null, AmazonCNVisitor, {
        statusCode: -1,
        url: 'www.amazon.cn'
      }, 'foo').should.not["throw"]();
    });
  });
  describe('invalid site handler', function() {
    var invalidSiteHandler;
    invalidSiteHandler = visitor.__get__('invalidSiteHandler');
    it('should throw error', function() {
      invalidSiteHandler.bind(null, 'www.example.com').should["throw"]('invalid data error, no available visitor for invalid site');
    });
  });
});
