// Generated by CoffeeScript 1.8.0
var fs, rewire, util;

util = require('util');

fs = require('fs');

rewire = require('rewire');

describe('page parser', function() {
  var MANDATORY_OUTPUT_FIELDS, Parser, createParser, createSiteDescribe, pageParser, urlToHtmlTable, _MANDATORY_PARSE_FIELDS;
  urlToHtmlTable = require('./cache/html.json');
  pageParser = rewire('../lib/page_parser.js');
  createParser = pageParser.createParser;
  pageParser.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      warn: function() {},
      error: function() {}
    }
  });
  describe('site selector', function() {
    var called, makeCalledFalse, makeCalledTrue, restore;
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = pageParser.__set__({
        invalidSiteHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should select amazon cn parser when given www.amazon.cn', function() {
      var AmazonCNParser;
      AmazonCNParser = pageParser.__get__('AmazonCNParser');
      createParser('www.amazon.cn').should.be.a.AmazonCNParser;
    });
    it('should select amazon us parser when given www.amazon.com', function() {
      var AmazonUSParser;
      AmazonUSParser = pageParser.__get__('AmazonUSParser');
      createParser('www.amazon.com').should.be.a.AmazonUSParser;
    });
    it('should select amazon jp parser when given www.amazon.co.jp', function() {
      var AmazonJPParser;
      AmazonJPParser = pageParser.__get__('AmazonJPParser');
      createParser('www.amazon.co.jp').should.be.a.AmazonJPParser;
    });
    it('should select jingdong parser when given www.jd.com', function() {
      var JingdongParser;
      JingdongParser = pageParser.__get__('JingdongParser');
      createParser('www.jd.com').should.be.a.JingdongParser;
    });
    it('should route to invalid site handler when neither above sites given', function() {
      pageParser.__set__('invalidSiteHandler', makeCalledTrue);
      createParser('foo');
      called.should.be["true"];
    });
  });
  Parser = pageParser.__get__('Parser');
  MANDATORY_OUTPUT_FIELDS = pageParser.MANDATORY_OUTPUT_FIELDS;
  _MANDATORY_PARSE_FIELDS = pageParser.__get__('_MANDATORY_PARSE_FIELDS');
  createSiteDescribe = function(title, siteRegExp, site) {
    describe(title, function() {
      var behavior, defaultParser, file, html, siteParser, table, url;
      table = {};
      for (url in urlToHtmlTable) {
        file = urlToHtmlTable[url];
        if (siteRegExp.test(url)) {
          table[url] = file;
        }
      }
      if (0 < Object.getOwnPropertyNames(table).length) {
        defaultParser = new Parser();
        siteParser = createParser(site);
        for (url in table) {
          file = table[url];
          behavior = util.format('should parse %s as expect', url);
          html = fs.readFileSync(file, {
            encoding: 'utf8'
          });
          it(behavior, (function(html) {
            return function() {
              var result;
              result = siteParser.parse(html);
              MANDATORY_OUTPUT_FIELDS.map(function(field) {
                result.should.have.property(field);
              });
              _MANDATORY_PARSE_FIELDS.map(function(field) {
                var defaultValue, siteValue;
                defaultValue = defaultParser[field]();
                siteValue = result[field];
                siteValue.should.not.equal(defaultValue);
              });
            };
          })(html));
        }
      } else {
        it('should parse all predefined cached pages as expect');
      }
    });
  };
  createSiteDescribe('amazon cn', /amazon\.cn/, 'www.amazon.cn');
  createSiteDescribe('amazon us', /amazon\.com/, 'www.amazon.com');
  createSiteDescribe('amazon jp', /amazon\.co\.jp/, 'www.amazon.co.jp');
  createSiteDescribe('jingdong', /jd\.com/, 'www.jd.com');
  describe('parse error handler', function() {
    var parseErrorHandler;
    parseErrorHandler = pageParser.__get__('parseErrorHandler');
    it('should throw error', function() {
      parseErrorHandler.bind(null, 'testParser').should["throw"]('parse error');
    });
  });
  describe('invalid site handler', function() {
    var invalidSiteHandler;
    invalidSiteHandler = pageParser.__get__('invalidSiteHandler');
    it('should throw error', function() {
      invalidSiteHandler.bind(null, 'foo').should["throw"]('invalid data error, no available parser for invalid site');
    });
  });
});
