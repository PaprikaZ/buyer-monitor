// Generated by CoffeeScript 1.8.0
var rewire, stream;

stream = require('stream');

rewire = require('rewire');

describe('Argv Parser', function() {
  describe('parse entry', function() {
    var argvParser, called, makeCalledTrue;
    argvParser = rewire('../lib/argv_parser.js');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    beforeEach(function() {
      called = false;
      argvParser.__set__('addHandler', function() {
        called = false;
      });
      argvParser.__set__('removeHandler', function() {
        return called = false;
      });
      argvParser.__set__('listHandler', function() {
        return called = false;
      });
      argvParser.__set__('resetHandler', function() {
        return called = false;
      });
      argvParser.__set__('helpHandler', function() {
        return called = false;
      });
      argvParser.__set__('unknownArgvHandler', function() {
        return called = false;
      });
    });
    it('should route to launch entry when no further arguments', function() {
      argvParser.parse([], makeCalledTrue);
      called.should.be["true"];
    });
    it('should route to unknown handler when only add given', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['add'], function() {});
      called.should.be["true"];
    });
    it('should route to add handler when add followed arguments', function() {
      argvParser.__set__('addHandler', makeCalledTrue);
      argvParser.parse(['add', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown handler when only remove given', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['remove'], function() {});
      called.should.be["true"];
    });
    it('should route to remove handler when remove followed arguments', function() {
      argvParser.__set__('removeHandler', makeCalledTrue);
      argvParser.parse(['remove', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to list handler when only list given', function() {
      argvParser.__set__('listHandler', makeCalledTrue);
      argvParser.parse(['list'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown handler when list followed arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['list', 'foo'], function() {});
      return called.should.be["true"];
    });
    it('should route to reset handler when only reset given', function() {
      argvParser.__set__('resetHandler', makeCalledTrue);
      argvParser.parse(['reset'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown handler when reset followed arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['reset', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to help handler when only help given', function() {
      argvParser.__set__('helpHandler', makeCalledTrue);
      argvParser.parse(['help'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown handler when help followed arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['help', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown handler when unknown arguments given', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      argvParser.parse(['foo'], function() {});
      called.should.be["true"];
    });
  });
  describe('handler', function() {
    var argvParser, called, makeCalledTrue;
    argvParser = rewire('../lib/argv_parser.js');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    beforeEach(function() {
      called = false;
      argvParser.__set__({
        console: {
          log: function() {}
        },
        process: {
          stdin: {
            setEncoding: function() {},
            once: function() {}
          },
          stdout: {
            write: function() {}
          },
          exit: makeCalledTrue
        },
        fs: {
          writeFileSync: function() {}
        }
      });
    });
    it("'unknown' should call process exit", function() {
      argvParser.__get__('unknownArgvHandler')();
      called.should.be["true"];
    });
    it("'help' should call process exit", function() {
      argvParser.__get__('helpHandler')();
      called.should.be["true"];
    });
    it("'list' should call process exit", function() {
      var revert;
      revert = argvParser.__set__({
        fs: {
          readFileSync: function(file) {
            return JSON.stringify([]);
          }
        }
      });
      argvParser.__get__('listHandler')();
      called.should.be["true"];
      revert();
    });
    it("'add' should call process exit with id, site, require specified", function() {
      var revert;
      revert = argvParser.__set__({
        fs: {
          writeFileSync: function() {},
          readFileSync: function() {
            return JSON.stringify([]);
          }
        }
      });
      argvParser.__get__('addHandler')([
        {
          'id': 'test0001',
          'site': 'www.example.com'
        }, 'price', 'foo', 'bar'
      ]);
      called.should.be["true"];
      revert();
    });
    it("'remove' should call process exit with id specified", function() {
      var revert;
      revert = argvParser.__set__({
        fs: {
          writeFileSync: function() {},
          readFileSync: function() {
            return JSON.stringify([]);
          }
        }
      });
      argvParser.__get__('removeHandler')(['id', 'test0001']);
      called.should.be["true"];
      revert();
    });
    it("'remove' should call process exit with both id and site specified", function() {
      var revert;
      revert = argvParser.__set__({
        fs: {
          writeFileSync: function() {},
          readFileSync: function() {
            return JSON.stringify([]);
          }
        }
      });
      argvParser.__get__('removeHandler')(['id', 'test0001', 'site', 'www.example.com']);
      called.should.be["true"];
      revert();
    });
    it("'reset' should call process exit", function() {
      var revert;
      revert = argvParser.__set__({
        process: {
          stdin: {
            setEncoding: function() {},
            once: function(ev, callback) {
              ev === 'data' && callback('yes');
            }
          },
          stdout: {
            write: function() {}
          },
          exit: makeCalledTrue
        }
      });
      argvParser.__get__('resetHandler')();
      called.should.be["true"];
      revert();
    });
  });
});
