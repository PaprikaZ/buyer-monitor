// Generated by CoffeeScript 1.8.0
var rewire;

rewire = require('rewire');

describe('argv parser module', function() {
  var argvParser;
  argvParser = rewire('../lib/argv_parser.js');
  argvParser.__set__({
    console: {
      log: function() {},
      info: function() {},
      warn: function() {},
      error: function() {}
    }
  });
  describe('parse', function() {
    var called, makeCalledFalse, makeCalledTrue, parse, restore;
    parse = argvParser.parse;
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = argvParser.__set__({
        addHandler: function() {},
        removeHandler: function() {},
        listHandler: function() {},
        resetHandler: function() {},
        helpHandler: function() {},
        unknownArgvHandler: function() {},
        missingArgHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should call callback when no command given', function() {
      parse([], makeCalledTrue);
      called.should.be["true"];
    });
    it('should route to add handler when add arguments given', function() {
      argvParser.__set__('addHandler', makeCalledTrue);
      parse(['add', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when single add given', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['add'], function() {});
      called.should.be["true"];
    });
    it('should route to remove handler when remove arguments given', function() {
      argvParser.__set__('removeHandler', makeCalledTrue);
      parse(['remove', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when single remove given', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['remove'], function() {});
      called.should.be["true"];
    });
    it('should route to list handler when single list given', function() {
      argvParser.__set__('listHandler', makeCalledTrue);
      parse(['list'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when list followed by arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['list', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to reset handler when single reset given', function() {
      argvParser.__set__('resetHandler', makeCalledTrue);
      parse(['reset'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when reset followed by arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['reset', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to help handler when single help given', function() {
      argvParser.__set__('helpHandler', makeCalledTrue);
      parse(['help'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when help followed by arguments', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['help', 'foo'], function() {});
      called.should.be["true"];
    });
    it('should route to unknown argv handler when arguments unknown', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      parse(['foo'], function() {});
      called.should.be["true"];
    });
  });
  describe('add handler', function() {
    var addHandler, called, fullVerdict, makeCalledFalse, makeCalledTrue, restore, simpleVerdict;
    addHandler = argvParser.__get__('addHandler');
    fullVerdict = {
      id: 'test0000',
      site: 'www.example.com',
      price: {
        compare: 'under',
        target: 100
      },
      discount: {
        compare: 'above',
        target: 20
      },
      review: {
        compare: 'above',
        target: 8
      },
      instore: {
        compare: 'equal',
        target: true
      },
      benefits: {
        compare: 'match',
        target: {
          regex: '20% off',
          option: 'i'
        }
      }
    };
    simpleVerdict = {
      id: 'test0000',
      site: 'www.example.com',
      price: {
        compare: 'under',
        target: 100
      }
    };
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([]);
          },
          writeFileSync: function() {}
        },
        missingArgHandler: function() {},
        unknownArgvHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should write new verdict when no duplication', function() {
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            data.should.equal(JSON.stringify([fullVerdict]));
          }
        }
      });
      addHandler(['id', fullVerdict.id, 'site', fullVerdict.site, 'price', fullVerdict.price.compare, fullVerdict.price.target.toString(), 'discount', fullVerdict.discount.compare, fullVerdict.discount.target.toString(), 'review', fullVerdict.review.compare, fullVerdict.review.target.toString(), 'instore', 'yes', 'benefits', '/20% off/i']);
      called.should.be["true"];
    });
    it('should make new verdict with unified verdict fields format', function() {
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            argvParser.__get__('AVAILABLE_VERDICT_FIELDS').map(function(field) {
              var product;
              product = JSON.parse(data).pop();
              product.should.have.property(field);
              product[field].should.have.property('compare');
              product[field].should.have.property('target');
            });
          }
        }
      });
      addHandler(['id', fullVerdict.id, 'site', fullVerdict.site, 'price', fullVerdict.price.compare, fullVerdict.price.target.toString(), 'discount', fullVerdict.discount.compare, fullVerdict.discount.target.toString(), 'review', fullVerdict.review.compare, fullVerdict.review.target.toString(), 'instore', 'yes', 'benefits', '/20% off/i']);
      called.should.be["true"];
    });
    it('should overwrite verdict when both id and site matched', function() {
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([simpleVerdict]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            data.should.equal(JSON.stringify([fullVerdict]));
          }
        }
      });
      addHandler(['id', fullVerdict.id, 'site', fullVerdict.site, 'price', fullVerdict.price.compare, fullVerdict.price.target.toString(), 'discount', fullVerdict.discount.compare, fullVerdict.discount.target.toString(), 'review', fullVerdict.review.compare, fullVerdict.review.target.toString(), 'instore', 'yes', 'benefits', '/20% off/i']);
      called.should.be["true"];
    });
    it('should make result no depence on from keywords sequence', function() {
      var writeData, writeDataA, writeDataB;
      writeData = writeDataA = writeDataB = null;
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            writeData = JSON.parse(data);
          }
        }
      });
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'price', simpleVerdict.price.compare, simpleVerdict.price.target]);
      writeDataA = writeData;
      addHandler(['site', simpleVerdict.site, 'price', simpleVerdict.price.compare, simpleVerdict.price.target, 'id', simpleVerdict.id]);
      writeDataB = writeData;
      writeDataA.should.eql(writeDataB);
      called.should.be["true"];
    });
    it('should route to missing arg handler when id not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      addHandler(['site', simpleVerdict, 'price', simpleVerdict.price.compare, simpleVerdict.price.target]);
      called.should.be["true"];
    });
    it('should route to missing arg handler when site not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      addHandler(['id', simpleVerdict.id, 'price', simpleVerdict.price.compare, simpleVerdict.price.target]);
      called.should.be["true"];
    });
    it('should route to missing arg handler when non verdicts given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site]);
      called.should.be["true"];
    });
    it('should route to missing arg handler when verdict field not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      addHandler(['id']);
      called.should.be["true"];
      makeCalledFalse();
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'price']);
      called.should.be["true"];
      makeCalledFalse();
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'price', simpleVerdict.price.compare]);
      called.should.be["true"];
      makeCalledFalse();
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'benefits']);
      called.should.be["true"];
      makeCalledFalse();
    });
    it('should route to unknown argv handler when verdict unknown', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'foo']);
      called.should.be["true"];
      makeCalledFalse();
      addHandler(['foo', 'id', simpleVerdict.id, 'site', simpleVerdict.site]);
      called.should.be["true"];
      makeCalledFalse();
    });
    it('should route to unknown argv handler when verdict field unknown', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      addHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site, 'price', 'foo', simpleVerdict.price.target]);
      called.should.be["true"];
      makeCalledFalse();
    });
  });
  describe('remove handler', function() {
    var called, makeCalledFalse, makeCalledTrue, removeHandler, restore, simpleVerdict;
    removeHandler = argvParser.__get__('removeHandler');
    simpleVerdict = {
      id: 'test0000',
      site: 'www.example.com',
      price: {
        compare: 'under',
        target: 100
      }
    };
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([simpleVerdict]);
          },
          writeFileSync: function() {}
        },
        verdictNotFoundHandler: function() {},
        missingArgHandler: function() {},
        unknownArgvHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should remove verdict when both id and site matched', function() {
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([simpleVerdict]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            data.should.equal(JSON.stringify([]));
          }
        }
      });
      removeHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site]);
      called.should.be["true"];
    });
    it('should make result no depence on keywords sequence', function() {
      var writeData, writeDataA, writeDataB;
      writeData = writeDataA = writeDataB = null;
      argvParser.__set__({
        fs: {
          readFileSync: function() {
            return JSON.stringify([simpleVerdict]);
          },
          writeFileSync: function(file, data) {
            makeCalledTrue();
            data.should.equal(JSON.stringify([]));
          }
        }
      });
      removeHandler(['id', simpleVerdict.id, 'site', simpleVerdict.site]);
      called.should.be["true"];
      removeHandler(['site', simpleVerdict.site, 'id', simpleVerdict.id]);
      called.should.be["true"];
    });
    it('should route to not found handler when given id and site not match', function() {
      argvParser.__set__('verdictNotFoundHandler', makeCalledTrue);
      removeHandler(['id', 'foo', 'site', simpleVerdict.site]);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['id', simpleVerdict.id, 'site', 'www.foobar.com']);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['id', 'foo', 'site', 'www.foobar.com']);
      called.should.be["true"];
      makeCalledFalse();
    });
    it('should route to missing arg handler when id or site value not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      removeHandler(['id']);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['id', simpleVerdict.id, 'site']);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['site', 'id', simpleVerdict.id]);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['id', 'site', simpleVerdict.site]);
      called.should.be["true"];
      makeCalledFalse();
      removeHandler(['site', simpleVerdict.site, 'id']);
      called.should.be["true"];
      makeCalledFalse();
    });
    it('should route to missing arg handler when id not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      removeHandler(['site', simpleVerdict.site]);
      called.should.be["true"];
    });
    it('should route to missing arg handler when site not given', function() {
      argvParser.__set__('missingArgHandler', makeCalledTrue);
      removeHandler(['id', simpleVerdict.id]);
      called.should.be["true"];
    });
    it('should route to unknown arg handler when keywords unknown', function() {
      argvParser.__set__('unknownArgvHandler', makeCalledTrue);
      removeHandler(['id', simpleVerdict.id, 'foo', 'site', simpleVerdict.site]);
      called.should.be["true"];
    });
  });
  describe('reset handler', function() {
    var makeUserInputDoneFalse, makeUserInputDoneTrue, makeWriteFileCalledFalse, makeWriteFileCalledTrue, resetHandler, restore, userInputDone, writeFileCalled;
    resetHandler = argvParser.__get__('resetHandler');
    writeFileCalled = false;
    makeWriteFileCalledTrue = function() {
      writeFileCalled = true;
    };
    makeWriteFileCalledFalse = function() {
      writeFileCalled = false;
    };
    userInputDone = false;
    makeUserInputDoneTrue = function() {
      userInputDone = true;
    };
    makeUserInputDoneFalse = function() {
      userInputDone = false;
    };
    restore = null;
    beforeEach(function() {
      makeWriteFileCalledFalse();
      makeUserInputDoneFalse();
      restore = argvParser.__set__({
        fs: {
          writeFileSync: makeWriteFileCalledTrue
        },
        process: {
          stdin: {
            setEncoding: function() {},
            once: function(ev, callback) {
              makeUserInputDoneTrue();
              ev === 'data' && callback('yes');
            }
          },
          stdout: {
            write: function() {}
          }
        },
        invalidResponseHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should clear verdicts record when user approve reset', function() {
      argvParser.__set__({
        fs: {
          writeFileSync: function(file, data) {
            makeWriteFileCalledTrue();
            data.should.equal(JSON.stringify([]));
          }
        }
      });
      resetHandler();
      writeFileCalled.should.be["true"];
      userInputDone.should.be["true"];
    });
    it('should not clear verdicts record when user not approve reset', function() {
      argvParser.__set__({
        process: {
          stdin: {
            setEncoding: function() {},
            once: function(ev, callback) {
              makeUserInputDoneTrue();
              ev === 'data' && callback('no');
            }
          },
          stdout: {
            write: function() {}
          }
        }
      });
      resetHandler();
      writeFileCalled.should.be["false"];
      userInputDone.should.be["true"];
    });
    it('should route to invalid response handler when user input invalid', function() {
      var called;
      called = false;
      argvParser.__set__({
        process: {
          stdin: {
            setEncoding: function() {},
            once: function(ev, callback) {
              makeUserInputDoneTrue();
              ev === 'data' && callback('foo');
            }
          },
          stdout: {
            write: function() {}
          }
        },
        invalidResponseHandler: function() {
          called = true;
        }
      });
      resetHandler();
      writeFileCalled.should.be["false"];
      userInputDone.should.be["true"];
      called.should.be["true"];
    });
  });
  describe('list handler', function() {
    var called, listHandler, makeCalledFalse, makeCalledTrue, restore;
    listHandler = argvParser.__get__('listHandler');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      return called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = argvParser.__set__({
        fs: {
          readFileSync: function() {
            makeCalledTrue();
            return JSON.stringify([]);
          }
        }
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should read verdicts record', function() {
      listHandler();
      called.should.be["true"];
    });
  });
  describe('help handler', function() {});
  describe('verdict not found handler', function() {
    var verdictNotFoundHandler;
    verdictNotFoundHandler = argvParser.__get__('verdictNotFoundHandler');
    it('should throw error', function() {
      verdictNotFoundHandler.should["throw"]('input error, verdict not founded');
    });
  });
  describe('unknown argv handler', function() {
    var unknownArgvHandler;
    unknownArgvHandler = argvParser.__get__('unknownArgvHandler');
    it('should throw error', function() {
      unknownArgvHandler.should["throw"]('input error, unknown arguments');
    });
  });
  describe('missing arg handler', function() {
    var missingArgHandler;
    missingArgHandler = argvParser.__get__('missingArgHandler');
    it('should throw error', function() {
      missingArgHandler.should["throw"]('input error, missing arguments');
    });
  });
  describe('invalid response handler', function() {
    var invalidResponseHandler;
    invalidResponseHandler = argvParser.__get__('invalidResponseHandler');
    it('should throw error', function() {
      invalidResponseHandler.bind(null, 'foo').should["throw"]('input error, invalid response');
    });
  });
});
