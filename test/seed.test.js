// Generated by CoffeeScript 1.8.0
var rewire;

rewire = require('rewire');

describe('seed', function() {
  var Seed, discountCompare, knownSite, mockErrorMsg, notAnNumber, priceCompare, reviewCompare, seed, testDiscount, testID, testPrice, testReview, unknownSite;
  seed = rewire('../lib/seed.js');
  seed.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      error: function() {}
    }
  });
  testID = 'test0000';
  knownSite = 'www.amazon.cn';
  unknownSite = 'www.example.com';
  testPrice = 9;
  priceCompare = 'under';
  testDiscount = 10;
  discountCompare = 'above';
  reviewCompare = 'above';
  testReview = 8;
  notAnNumber = 'null';
  mockErrorMsg = 'mock msg';
  Seed = seed.__get__('Seed');
  describe('constructor', function() {
    var called, makeCalledFalse, makeCalledTrue, restore;
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = seed.__set__({
        siteNotSupportHandler: function() {},
        illegalTypeHandler: function() {},
        verdictMissingHandler: function() {},
        noneVerdictLoadedHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should initialize its id and site fields copy from product', function() {
      var product, s;
      product = {
        id: testID,
        site: knownSite,
        discount: {
          compare: discountCompare,
          target: testDiscount
        }
      };
      s = new Seed(product);
      s.id.should.be.equal(testID);
      s.site.should.be.equal(knownSite);
    });
    it('should initialize its url field', function() {
      var product, s;
      product = {
        id: testID,
        site: knownSite,
        discount: {
          compare: discountCompare,
          target: testDiscount
        }
      };
      s = new Seed(product);
      s.should.have.property('url');
      s.url.should.be.a.String;
    });
    it('should initialize at least one verdict method', function() {
      var product, s, verdictMethods;
      product = {
        id: testID,
        site: knownSite,
        discount: {
          compare: discountCompare,
          target: testDiscount
        }
      };
      s = new Seed(product);
      verdictMethods = seed.__get__('_AVAILABLE_VERDICT_METHODS');
      verdictMethods.some(function(method) {
        return typeof s[method] === 'function';
      }).should.be["true"];
    });
    it('should route to site not support handler when site not in support list', function() {
      var product, s;
      product = {
        id: testID,
        site: unknownSite,
        price: {
          compare: priceCompare,
          target: testPrice
        }
      };
      seed.__set__({
        siteNotSupportHandler: makeCalledTrue
      });
      s = new Seed(product);
      called.should.be["true"];
    });
    it('should route to illegal type handler when detect not a number', function() {
      var product, s;
      product = {
        id: testID,
        site: knownSite,
        discount: {
          compare: discountCompare,
          target: notAnNumber
        }
      };
      seed.__set__({
        illegalTypeHandler: makeCalledTrue
      });
      s = new Seed(product);
      called.should.be["true"];
    });
  });
  describe('verdict', function() {
    it('should give price under target or not', function() {
      var highPriceResult, lowPriceResult, product, s, samePriceResult;
      product = {
        id: testID,
        site: knownSite,
        price: {
          comapre: priceCompare,
          target: testPrice
        }
      };
      lowPriceResult = {
        price: testPrice - 1
      };
      samePriceResult = {
        price: testPrice
      };
      highPriceResult = {
        price: testPrice + 1
      };
      s = new Seed(product);
      s.verdict(lowPriceResult).should.be["true"];
      s.verdict(samePriceResult).should.be["false"];
      s.verdict(highPriceResult).should.be["false"];
    });
    it('should give discount above target or not', function() {
      var highDiscountResult, lowDiscountResult, product, s, sameDiscountResult;
      product = {
        id: testID,
        site: knownSite,
        discount: {
          compare: discountCompare,
          target: testDiscount
        }
      };
      lowDiscountResult = {
        discount: testDiscount - 1
      };
      sameDiscountResult = {
        discount: testDiscount
      };
      highDiscountResult = {
        discount: testDiscount + 1
      };
      s = new Seed(product);
      s.verdict(lowDiscountResult).should.be["false"];
      s.verdict(sameDiscountResult).should.be["false"];
      s.verdict(highDiscountResult).should.be["true"];
    });
    it('should give review above target or not', function() {
      var highReviewResult, lowReviewResult, product, s, sameReviewResult;
      product = {
        id: testID,
        site: knownSite,
        review: {
          compare: reviewCompare,
          target: testReview
        }
      };
      lowReviewResult = {
        review: testReview - 1
      };
      sameReviewResult = {
        review: testReview
      };
      highReviewResult = {
        review: testReview + 1
      };
      s = new Seed(product);
      s.verdict(lowReviewResult).should.be["false"];
      s.verdict(sameReviewResult).should.be["false"];
      s.verdict(highReviewResult).should.be["true"];
    });
    it('should give instore state is acceptable or not', function() {
      var product, s;
      product = {
        id: testID,
        site: knownSite,
        instore: true
      };
      s = new Seed(product);
      s.verdict({
        instore: true
      }).should.be["true"];
      s.verdict({
        instore: false
      }).should.be["false"];
    });
    it('should give any benefits matched or not', function() {
      var matchedResult, notMatchedResult, product, s;
      product = {
        id: testID,
        site: knownSite,
        benefits: {
          regex: '20% off',
          option: 'i'
        }
      };
      matchedResult = {
        benefits: ['get total 200 with instant 50 off', '20% OFF']
      };
      notMatchedResult = {
        benefits: ['buy two with one free', 'get total 200 with instant 50 off']
      };
      s = new Seed(product);
      s.verdict(matchedResult).should.be["true"];
      s.verdict(notMatchedResult).should.be["false"];
    });
    it('should summarize all sub verdicts with and logic', function() {
      var matchedResult, notMatchedResult, product, s;
      product = {
        id: testID,
        site: knownSite,
        price: {
          compare: priceCompare,
          target: testPrice
        },
        discount: {
          compare: discountCompare,
          target: testDiscount
        },
        review: {
          compare: reviewCompare,
          target: testReview
        },
        instore: true,
        benefits: {
          regex: '20% off',
          option: 'i'
        }
      };
      matchedResult = {
        price: testPrice - 1,
        discount: testDiscount + 1,
        review: testReview + 1,
        instore: true,
        benefits: ['get total 200 with instant 50 off', '20% OFF']
      };
      notMatchedResult = {
        price: testPrice - 1,
        discount: testDiscount + 1,
        review: testReview + 1,
        instore: false,
        benefits: ['get total 200 with instant 50 off', 'two with one free']
      };
      s = new Seed(product);
      s.verdict(matchedResult).should.be["true"];
      s.verdict(notMatchedResult).should.be["false"];
    });
  });
  describe('equal', function() {
    it('should return true if both id and site equal', function() {
      var productA, productB, productC, sa, sb, sc;
      productA = {
        id: testID,
        site: 'www.amazon.cn',
        review: {
          compare: reviewCompare,
          target: testReview
        }
      };
      productB = {
        id: 'foo',
        site: 'www.amazon.cn',
        review: {
          compare: reviewCompare,
          target: testReview
        }
      };
      productC = {
        id: testID,
        site: 'www.amazon.com',
        review: {
          compare: reviewCompare,
          target: testReview
        }
      };
      sa = new Seed(productA);
      sb = new Seed(productB);
      sc = new Seed(productC);
      sa.equal(sb).should.be["false"];
      sa.equal(sc).should.be["false"];
      sb.equal(sc).should.be["false"];
      sa.equal(sa).should.be["true"];
    });
  });
  describe('verdict missing handler', function() {
    var verdictMissingHandler;
    verdictMissingHandler = seed.__get__('verdictMissingHandler');
    it('should throw error', function() {
      verdictMissingHandler.bind(null, testID, knownSite).should["throw"]('value missing error, non verdict fields specified');
    });
  });
  describe('site not support handler', function() {
    var siteNotSupportHandler;
    siteNotSupportHandler = seed.__get__('siteNotSupportHandler');
    it('should throw error', function() {
      siteNotSupportHandler.bind(null, unknownSite).should["throw"]('value not support error, verdict site');
    });
  });
  describe('illegal type handler', function() {
    var illegalTypeHandler;
    illegalTypeHandler = seed.__get__('illegalTypeHandler');
    it('should throw error', function() {
      illegalTypeHandler.bind(null, testID, knownSite, 'price').should["throw"]('value not support error, illegal verdict value');
    });
  });
  describe('none verdict loaded handler', function() {
    var noneVerdictLoadedHandler;
    noneVerdictLoadedHandler = seed.__get__('noneVerdictLoadedHandler');
    it('should throw error', function() {
      noneVerdictLoadedHandler.bind(null, testID, knownSite).should["throw"]('load error, none verdict fields loaded');
    });
  });
});
