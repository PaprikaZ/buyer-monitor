// Generated by CoffeeScript 1.8.0
var rewire;

rewire = require('rewire');

describe('model module', function() {
  var model;
  model = rewire('../lib/model.js');
  describe('enum types corresponding to site', function() {
    var site;
    site = rewire('../lib/site.js');
    it('should cover all presented sites from site module', function() {
      var enumSites, sitesFromModule;
      sitesFromModule = site.__get__('sites').map(function(elt) {
        return elt.site;
      });
      enumSites = model.__get__('availableSites');
      sitesFromModule.forEach(function(s) {
        return enumSites.should.containEql(s);
      });
    });
    it('should cover all presented currencies from site module', function() {
      var currenciesFromModule, enumCurrencies;
      currenciesFromModule = site.__get__('sites').map(function(elt) {
        return elt.currency;
      });
      enumCurrencies = model.__get__('availableCurrencies');
      currenciesFromModule.forEach(function(c) {
        return enumCurrencies.should.containEql(c);
      });
    });
  });
  describe('enum types corresponding to seed', function() {
    var seed;
    seed = rewire('../lib/seed.js');
    it('should cover all presented verdict fields from seed module', function() {
      var enumFields, fieldsFromModule;
      fieldsFromModule = seed.AVAILABLE_VERDICT_FIELDS;
      enumFields = model.__get__('availableVerdictFields');
      fieldsFromModule.forEach(function(f) {
        return enumFields.should.containEql(f);
      });
    });
    it('should cover all presented verdict methods from seed module', function() {
      var enumMethods, methodsFromModule;
      methodsFromModule = seed.AVAILABLE_METHODS;
      enumMethods = model.__get__('availableVerdictMethods');
      methodsFromModule.forEach(function(m) {
        return enumMethods.should.containEql(m);
      });
    });
  });
});
