// Generated by CoffeeScript 1.8.0
var rewire;

rewire = require('rewire');

describe('messenger', function() {
  var messenger, mockErrorMsg, testID, testSite, testToken, testUrl;
  messenger = rewire('../lib/messenger.js');
  messenger.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      error: function() {}
    }
  });
  testID = 'test0000';
  testSite = 'www.example.com';
  testUrl = 'www.example.com/pd/test0000';
  testToken = 'ffffffff';
  mockErrorMsg = 'mock request error';
  describe('assemble message title', function() {
    var assembleMessageTitle, called, makeCalledFalse, makeCalledTrue, restore;
    assembleMessageTitle = messenger.__get__('assembleMessageTitle');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = messenger.__set__({
        fieldMissingHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should return title when result owns base fields', function() {
      var testResult;
      testResult = {
        id: testID,
        site: testUrl,
        url: testUrl
      };
      assembleMessageTitle(testResult).should.be.a.String;
    });
    it('should route to field missing handler when result id missing', function() {
      var testResult;
      testResult = {
        site: testSite,
        url: testUrl
      };
      messenger.__set__({
        fieldMissingHandler: makeCalledTrue
      });
      assembleMessageTitle(testResult);
      called.should.be["true"];
    });
    it('should route to field missing handler when result site missing', function() {
      var testResult;
      testResult = {
        id: testID,
        url: testUrl
      };
      messenger.__set__({
        fieldMissingHandler: makeCalledTrue
      });
      assembleMessageTitle(testResult);
      called.should.be["true"];
    });
  });
  describe('assemble message body', function() {
    var assembleMessageBody, called, makeCalledFalse, makeCalledTrue, restore;
    assembleMessageBody = messenger.__get__('assembleMessageBody');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = messenger.__set__({
        fieldMissingHandler: function() {}
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should return body when result own all parsed fields', function() {
      var testResult;
      testResult = {
        id: testID,
        site: testSite,
        url: testUrl,
        title: 'product test title',
        price: 1,
        fullPrice: 1,
        discount: 10,
        review: 9,
        instore: true,
        benefits: []
      };
      assembleMessageBody(testResult).should.be.String;
    });
    it('should route to field missing handler when some parse fields missing', function() {
      var testResult;
      testResult = {
        id: testID,
        site: testSite,
        url: testUrl,
        title: 'product test title',
        price: 1,
        discount: 10,
        review: 9,
        instore: true,
        benefits: []
      };
      messenger.__set__({
        fieldMissingHandler: makeCalledTrue
      });
      assembleMessageBody(testResult);
      called.should.be["true"];
    });
  });
  describe('push', function() {
    var called, makeCalledFalse, makeCalledTrue, push, restore, result;
    push = messenger.__get__('push');
    result = {
      id: testID,
      site: testSite,
      url: testUrl,
      title: 'product test title',
      price: 1,
      fullPrice: 1,
      discount: 10,
      review: 9,
      instore: true,
      benefits: []
    };
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    makeCalledFalse = function() {
      called = false;
    };
    restore = null;
    beforeEach(function() {
      makeCalledFalse();
      restore = messenger.__set__({
        responseErrorHandler: function() {},
        requestErrorHandler: function() {},
        request: {
          post: function() {}
        }
      });
    });
    afterEach(function() {
      return restore();
    });
    it('should not throw error when http post success', function() {
      messenger.__set__({
        request: {
          post: function(url, callback) {
            makeCalledTrue();
            callback(null, {
              statusCode: 200
            }, '');
          }
        }
      });
      push.bind(null, result, testToken).should.not["throw"]();
      called.should.be["true"];
    });
    it('should route to response error handler when response nok', function() {
      messenger.__set__({
        request: {
          post: function(url, callback) {
            callback(null, {
              statusCode: -1
            }, '');
          }
        },
        responseErrorHandler: makeCalledTrue
      });
      push(result, testToken);
      called.should.be["true"];
    });
    it('should route to request error handler when request caught error', function() {
      messenger.__set__({
        request: {
          post: function(url, callback) {
            callback(new Error(mockErrorMsg));
          }
        },
        requestErrorHandler: makeCalledTrue
      });
      push(result, testToken);
      called.should.be["true"];
    });
  });
  describe('field missing handler', function() {
    var fieldMissingHandler;
    fieldMissingHandler = messenger.__get__('fieldMissingHandler');
    it('should throw error', function() {
      fieldMissingHandler.bind(null, 'foo').should["throw"]('data error, missing necessary fields');
    });
  });
  describe('response error handler', function() {
    var responseErrorHandler;
    responseErrorHandler = messenger.__get__('responseErrorHandler');
    it('should throw error', function() {
      responseErrorHandler.bind(null, testToken, {
        url: testSite,
        statusCode: -1
      }, '').should["throw"]('push message response error');
    });
  });
  describe('request error handler', function() {
    var requestErrorHandler;
    requestErrorHandler = messenger.__get__('requestErrorHandler');
    it('should throw error', function() {
      requestErrorHandler.bind(null, testToken, new Error(mockErrorMsg)).should["throw"](mockErrorMsg);
    });
  });
});
