// Generated by CoffeeScript 1.8.0
var messenger, rewire;

rewire = require('rewire');

messenger = rewire('../lib/messenger.js');

describe('messenger', function() {
  messenger.__set__({
    logger: {
      debug: function() {},
      info: function() {},
      error: function() {}
    },
    console: {
      log: function() {},
      error: function() {}
    },
    request: {
      post: function() {}
    }
  });
  describe('assemble message title', function() {
    var assembleMessageTitle, called, makeCalledTrue;
    assembleMessageTitle = messenger.__get__('assembleMessageTitle');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    beforeEach(function() {
      called = false;
    });
    it('should return string when result own all product base fields', function() {
      var testResult;
      testResult = {
        id: 'test0000',
        site: 'www.example.com',
        url: 'www.example.com/pd/test0000'
      };
      assembleMessageTitle(testResult).should.be.a.String;
    });
    it('should route to result error handler when result id is missing', function() {
      var revert, testResult;
      testResult = {
        site: 'www.example.com',
        url: 'www.example.com/pd/test0000'
      };
      revert = messenger.__set__({
        resultErrorHandler: makeCalledTrue
      });
      assembleMessageTitle(testResult);
      called.should.be["true"];
      revert();
    });
    it('should route to result error handler when result site is missing', function() {
      var revert, testResult;
      testResult = {
        id: 'test0000',
        url: 'www.example.com/pd/test0000'
      };
      revert = messenger.__set__({
        resultErrorHandler: makeCalledTrue
      });
      assembleMessageTitle(testResult);
      called.should.be["true"];
      revert();
    });
  });
  describe('assemble message body', function() {
    var assembleMessageBody;
    assembleMessageBody = messenger.__get__('assembleMessageBody');
    it('should return string when result own all parse fields', function() {
      var testResult;
      testResult = {
        id: 'test0000',
        site: 'www.example.com',
        url: 'www.example.com/pd/test0000',
        title: 'product test title',
        price: 1,
        fullPrice: 1,
        discount: 10,
        review: 9,
        instore: true,
        benefits: []
      };
      assembleMessageBody(testResult).should.be.String;
    });
    it('should route to result error handler when parse fields of result is missing', function() {
      var called, revert, testResult;
      called = false;
      testResult = {
        id: 'test0000',
        site: 'www.example.com',
        url: 'www.example.com/pd/test0000'
      };
      revert = messenger.__set__({
        resultErrorHandler: function() {
          called = true;
        }
      });
      assembleMessageBody(testResult);
      called.should.be["true"];
      revert();
    });
  });
  describe('push', function() {
    var called, makeCalledTrue, push, result;
    push = messenger.__get__('push');
    called = false;
    makeCalledTrue = function() {
      called = true;
    };
    beforeEach(function() {
      called = false;
    });
    result = {
      id: 'test0000',
      site: 'www.example.com',
      url: 'www.example.com/pd/test0000',
      title: 'product test title',
      price: 1,
      fullPrice: 1,
      discount: 10,
      review: 9,
      instore: true,
      benefits: []
    };
    it('should log push success message when http post response ok', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        logger: {
          debug: function() {},
          info: function(log) {
            if (/^push message to user/.test(log)) {
              makeCalledTrue();
            }
          },
          error: function() {}
        },
        request: {
          post: function(url, callback) {
            callback(null, {
              statusCode: 200
            }, '');
          }
        }
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should first assemble message title', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        assembleMessageTitle: makeCalledTrue
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should first assemble message body', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        assembleMessageBody: makeCalledTrue
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should send http post request when there is available user tokens', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        request: {
          post: makeCalledTrue
        }
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should route to token empty handler when no available access tokens', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: [],
        tokenEmptyHandler: makeCalledTrue
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should route to response error handler when status code not equal to 200', function() {
      var revert;
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        request: {
          post: function(url, callback) {
            callback(null, {
              statusCode: -1
            }, '');
          }
        },
        responseErrorHandler: makeCalledTrue
      });
      push(result);
      called.should.be["true"];
      revert();
    });
    it('should route to request error handler when request caught error', function() {
      var mockErrorMsg, revert;
      mockErrorMsg = 'mock request error';
      revert = messenger.__set__({
        accessTokens: ['ffffffff'],
        request: {
          post: function(url, callback) {
            callback(new Error(mockErrorMsg), null, null);
          }
        },
        requestErrorHandler: makeCalledTrue
      });
      push(result);
      called.should.be["true"];
      revert();
    });
  });
  describe('token empty handler', function() {
    var tokenEmptyHandler;
    tokenEmptyHandler = messenger.__get__('tokenEmptyHandler');
    it('should throw empty error', function() {
      return tokenEmptyHandler.should["throw"]('no available tokens');
    });
  });
  describe('result error handler', function() {
    var resultErrorHandler;
    resultErrorHandler = messenger.__get__('resultErrorHandler');
    it('should throw result error', function() {
      resultErrorHandler.should["throw"]('result attributes error');
    });
  });
  describe('response error handler', function() {
    var responseErrorHandler;
    responseErrorHandler = messenger.__get__('responseErrorHandler');
    it('should throw response error', function() {
      responseErrorHandler.bind(null, 'ffffffff', {
        statusCode: -1
      }, '').should["throw"]('push message response error');
    });
  });
  describe('request error handler', function() {
    var mockErrorMsg, requestErrorHandler;
    requestErrorHandler = messenger.__get__('requestErrorHandler');
    mockErrorMsg = 'mock request error';
    it('should throw request error', function() {
      requestErrorHandler.bind(null, 'ffffffff', new Error(mockErrorMsg)).should["throw"](mockErrorMsg);
    });
  });
});
